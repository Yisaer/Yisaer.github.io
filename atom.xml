<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yisa&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/a0a8fc28fb8d304a1487320dcd504fe1</icon>
  <subtitle>无关浮名，但求同好</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Yisaer.github.io/"/>
  <updated>2018-06-17T16:33:36.000Z</updated>
  <id>http://Yisaer.github.io/</id>
  
  <author>
    <name>Yisaer</name>
    <email>disxiaofei@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>成为mentor之前</title>
    <link href="http://Yisaer.github.io/2018/06/17/mentor/"/>
    <id>http://Yisaer.github.io/2018/06/17/mentor/</id>
    <published>2018-06-17T15:14:45.000Z</published>
    <updated>2018-06-17T16:33:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote><p>   下礼拜项目组会迎接来两个大三的后端实习生，然后不出意外的话我会成为其中一个实习生的mentor。一想到其实我自己也是实习生，现在拿的也是实习工资，从下礼拜起就还要带另外一个实习生想想简直不要不要的。</p></blockquote><p><a href="https://imgchr.com/i/Cx8Tnx" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/06/17/Cx8Tnx.png" alt="Cx8Tnx.png"></a></p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>从去年十月份加入酷家乐开始算起，到现在也已经快有差不多三个季度了。从上海分公司这里七月份才刚刚创建来说，我也算是酷家乐上海的老人了… </p><p>一年之前我在刚刚踏入实习生活的时候，就曾经写过一篇文章描述过自己在进入实习的一些状况和期许吧。现在有些时候我也时常会翻回去看看自己以前的博客。从刚开始到现在，虽然可能只有短短的不到一年的时间吧，当中也辗辗转转了好几个公司，最终落脚在了现在的公司。从技术上来说，看到了不同公司的不同的技术栈以及技术方向。从产品和业务的角度上来说，也做过一些2B,2C或者是对内支持的产品。如果说自己有什么改变的话，可能说每次看待一件事情或者看待一个产品都会有很多的思考方向吧，心态也逐渐平缓了许多，不像一开始实习的时候那样火急火燎的。</p><p>因为换的实习很多，所以带过我的mentor也很多。在和他们共同工作的日子里，可能我和他们有些人公事了几个月，也有的只公事了几个礼拜。虽然他们每个人的特点都各不相同，但是其实都给我留下了很深刻的印象，我想我现在工作的心态与观念可能也受到了他们每一个人或多或少的影响吧。</p><p>以前我在开源活动做过一个分享，主要面对的对象都是一些大三大二的学弟学妹们，主题则是关于在实习前我们需要准备的是什么。在分享的一开始我跟听分享的那些学弟学妹们讲，其实做一个实习生是最爽的，因为你其实不用有任何负担和压力，如果你有什么任务完不成的话，你把锅甩给你的mentor就好了. 说实话这招用起来其实挺爽的，但是会给你的mentor造成很大的压力。我基本上甩过很多问题给我的所有mentor过，带过我的那些mentor里面，有技术好的，也有技术一般的，有负责的，也有不负责的。</p><p>碰到技术一般并且不负责的，他就是帮我看一看然后发现自己搞不定就又甩给我说随便我咋解决咋尝试了，然后留下我一脸懵逼然后人肉试错了将近七十多次。</p><p>碰到技术一般并且比较负责的，这个项目是我到现在以来接触过的最为复杂，最为冷门的一个非常小的领域的算法项目。说实话我和mentor当时都对这个项目一脸懵逼，但是mentor当时和我吃饭的时候就说没关系不要有太大压力，你就算不会做也还是有我在的。后来他帮我收集了这个方向的很多资料以及参考论文省了我非常多的时间。当然那个时候我也意识到了他其实算法技术一般，因为那个小众领域的算法项目到后面就是我自己一个人在一直跟进和维护了。不过在我的工作过程中，我依旧一直和他讨论和分享我在解决问题时候的困境和烦恼，虽然最后我都靠自己解决了，不过还是非常感谢他对我的帮助的。</p><p>我碰到过两位技术牛逼并且非常负责的mentor，有趣的是他们两位对我的帮助的表现形式是不一样的，同样是我把问题提出来问他们，其中一个人是将我的代码拿过去以后改好了告诉我我已经帮你修好问题了，而另外一个人是听完我说的问题后，给了我一个建议的方向，让我找找这方面的资料去解决我的问题，最后我通过他给我的建议竟然真的能解决问题。</p><p>这两位Mentor在技术上给我的帮助都很大。有趣的是其中一位为我解决问题的时候喜欢亲力亲为，与此同时另一位则是听完我的描述以后给了我一个正确的方向。对于前者，给我更多的感觉是非常的可靠，碰到问题也不会心烦意乱了。而另外一位给我的感觉就是有点神奇了，虽然他给我的建议往往是正确的，但是过程中还是有时候会感到心烦意乱，或者不如说解决一个奇怪的问题本身/BUG本身就是一个痛苦的过程。</p><p>在这一年不到的实习生活中，已经基本上完全适应了一个全职工作者的工作节奏。在我实习生活的一开始，我曾希望自己能早日成为一个能独挡一面的人，因为这听起来非常的酷。然后现在停在这一刻，我审视了一下自己。在最近的CES上海展览上，我们的产品获得非常难得创新奖，而我则是直接负责并维护了这个产品背后的三个核心后端服务，以及后端背后的一套组件。在运维上，我一直在做基于Docker和Gitlab-ci的构建发布工作以及构建目前kubernetes平台上Service mesh的各种服务组件。在Github开源社区中，我发布了自己毕业设计的第一个release版本，逐渐获得了一些Star和issue，也有一些人fork了我的项目准备给我增加功能。在这一刻，也许我能稍微骄傲的讲一下感觉自己确实成长了，能够独挡稍微一点点面了。</p><p>下礼拜以后实习生就要来了，我也要成为一个mentor了。回想起刚刚来到现在的公司的时候，研发团队只有五个人，那时候还是冬天，到了晚上空调停了以后就只能一边抖腿一边写代码。而现在我们马上就要搬家去陆家嘴软件那边好容纳下我们预计马上将要到达的八十人团队。作为一个Mentor，我不知道对于那位实习生来说我会是怎么样的。而我自己又希望自己作为mentor是一个怎样的人呢，这个问题也留给了我去思考。不过不可否认的是，作为一个mentor对于实习生的影响很有可能会是巨大和深刻的。从这个角度去考虑，我希望我尽可能是一名称职的mentor吧。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>突然想起一个有趣的事情，上次Hackday大家在休息室里一起吃午饭的时候。我们的一个产品问我工作几年了，我说我还没毕业。他惊讶了一下笑着跟我说看你做事挺可靠的没想到居然还是一个实习生。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;   下礼拜项目组会迎接来两个大三的后端实习生，然后不出意外的话我会成为其中一个实习生的mentor。一想到其实我自己也是实习生，现在拿的也是实习工资，从下礼拜起就还要带另外一个实习生想想简直不要不要的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/Cx8Tnx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/06/17/Cx8Tnx.png&quot; alt=&quot;Cx8Tnx.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://Yisaer.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>时代与观念</title>
    <link href="http://Yisaer.github.io/2018/03/24/view/"/>
    <id>http://Yisaer.github.io/2018/03/24/view/</id>
    <published>2018-03-24T02:46:14.000Z</published>
    <updated>2018-03-24T04:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww3.sinaimg.cn/large/0060lm7Tly1fpnqo9vl0zj30ci0cit8o.jpg" alt="pic1"></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote><p>昨天酷家乐宣讲会在上海大学来了大概50个左右的同学。当我问在场14级同学有多少时，百分之30的同学举起了手。当我问15级同学有多少时，百分之60的同学举起了手。当我问16级同学有多少时，两位同学举起了手。</p></blockquote><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>当我们把时光倒流回2011年，那一年上海大学第一次开始专业分流的政策。如果这个时候你在上大图书馆前的主干道拦住那些来来往往匆匆忙忙的理工大类学生，告诉他要好好学习，争取能进入计算机学院学习编程。他一定会用一个不以为然的眼光告诉你，我对学习计算机没有兴趣，我认为上海大学的某个学院实力更加强劲，今年专业分流的政策让我有种参加第二次高考的感觉，我要好好复习去了。那个时候，上海大学开源社区已经成立一年，08级学生胡瀚森作为上大开源社区的开创者，吸引了当时热爱编程的11级学生沈杨华和他们的同学们在这个非官方社区一起交流讨论。</p><p>这个时候的中国互联网，团购的概念开始兴起，越来越多的团购网站开始兴起，O2O的概念让人们开始钢架关注生活服务，为了挖掘和占领市场上的需求，移动端开发程序员一时间成为了市场上最为紧缺的资源，而那时候他们的薪资也像风起云涌的海面一般一浪更比一浪高。</p><p>2013年时，已经是上海大学开启专业分流政策的第三个年头了。你去跟当时的理工大类学生说，快去报计算机学院啊，现在市场上特别缺程序员。也许你碰到他鄙夷的眼光，计算机学院排名这么低，我要是报考这个院系岂不是浪费了我这么高的年级排名？ 那一年，上海大学计院在大一时招收了英才班，部分同学不用通过专业分流考试，大一时直接就能就读计院。同年，第39届ACM World Final，上海大学的ACM队勇闯世界总决赛获得成绩，kuangbin的“人十我百，人百我万”成为每一个ACMer心中的目标。那一年，上大计院的专业分流排名是百分之九十多，成为差生才去的学院。</p><p>2015年，我室友问我专业分流第一志愿是什么，我说我想去计算机学院。那你稳了呀，计院很好进的，我室友说。我看了看往年计院的专业分流排名，心想确实，这次春季的微积分3和大物2只要能过了就行，没必要复习的太好。同年，校园司令公众号上透露消息这次专业分流很多人都报名去了计院。后来他的专业排名果然就如同一匹黑马一般瞬间达到了1600多名。那一年，我以微弱的差距遗憾掉档了。</p><p>2016年，如果你在路上拦住一个理工大类的学生，问他打不打算报考计算机学院时，也许他会告诉现在互联网发展特别迅速，计院的排名也不低，我要好好准备这次专业分流。那一年，在焦急的打开转专业结果查询时，看到我的转专业申请终于通过了，我长长的舒了一口气，准备感到教务处将我的大三第一学期的课程全部更换，变成计院的大二大三专业课。同年，计院的专业排名一路飙升来到1100名左右，一名15级叫钟鸣宇的学弟加了我询问关于转专业的相关事宜。我将我那一年在选课和申请的所有心得告诉了他并安慰他不要紧第二年还有机会。</p><p>2017年，计院的专业排名已经在招收两百多名的情况下一路高升到890多名，第一次超越了通信学院。胡瀚森学长回到上大作为摩根士丹利员工来开启实习生招聘，我作为一个无绩点无奖牌无成绩的三无学生急急忙忙的准备了一份英文简历。看着自己空空如也的简历，我在研究生办公室里问沈杨华学长究竟什么是后端开发，沈学长当时一边忙着编写他的实习项目，一边告诉我他对后端开发的理解。同年，我和14级的同届同学徐际岚一起过了摩根的初试，为了准备终面，我们日复一日的在计院701实验室内准备到晚上。 某一天，他苦笑着告诉我，这一次终面还会有很多清华北大的从北京赶过来面试，我告诉他我们尽力就好。本来以为在找实习的时候会轻松一点，没想到这一块早就已经厮杀成血海了。</p><p>那一年的夏末，我和他结束了两个月的大摩实习生活，他开始了联系导师读研，我一头跳进找工作的大海里扑腾。笔试，面试，内推，一面，二面，三面，HR面。这些名词是当时的我们口中最念念有词的东西，在牛客网的交流社区内，最火爆的永远是某某某公司的面经，找工作好难啊，九月份的时候我感觉自己失眠了一个月。</p><p>一个月前，我在v2上看到阿里的HR已经开始悄摸摸的发放内推渠道。这么早!?我感慨之余，把这个消息转告给了钟鸣宇学弟，虽然过程曲折，但他终于已经来到了最初想要来的计算机学院，开始了忙碌的课程。一定不要拖得太晚申请，我告诉他，现在实习申请就是一个萝卜一个坑，申请晚了就没了。</p><p>一个礼拜前，酷家乐打算在上海大学开办第一次宣讲会，我特意跑到了16级群里多次宣传大二的同学一定要趁早开始准备实习，不要惯性思维的觉得实习等到大三再开始也来得及。在宣讲会上，当我问到16级的同学有多少时，看到有两位16级的同学能意识到从现在起就要敢于踏出学校进入社会实习磨炼，我非常开心觉得自己没有白白宣传。</p><p>2018年，假如你拦住一位理工大类的学生，问他是否会考虑专业分流报名计算机学院时，他也许会用一个惊讶的眼神告诉你，那还用考虑么？去年计院排名这么高今年只会越来越难进，我要好好学习微积分和概率论，那是机器学习的基础。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fpnqo9vl0zj30ci0cit8o.jpg&quot; alt=&quot;pic1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;昨天酷家乐宣讲会在上海大学来了大概50个左右的同学。当我问在场14级同学有多少时，百分之30的同学举起了手。当我问15级同学有多少时，百分之60的同学举起了手。当我问16级同学有多少时，两位同学举起了手。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://Yisaer.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>我是如何获得那些微博大V的手机号</title>
    <link href="http://Yisaer.github.io/2018/02/08/safe/"/>
    <id>http://Yisaer.github.io/2018/02/08/safe/</id>
    <published>2018-02-08T15:29:05.000Z</published>
    <updated>2018-02-09T01:19:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><p>这几天公司里的事情忙的七七八八了，再加上马上要过年了实在是有点提不起劲。就在我一边刷刷知乎，一边改改代码的时候，突然看到了一个我关注很久的大V的一个分享活动，说白了就是银联送钱送红包的活动。我一看，还有这等好事儿，便点了进去。</p><a id="more"></a><p>大家都知道，一直以来，银联爸爸不缺钱，不缺资源，但偏偏缺的就是广大人民群众的爱。每天我上班坐地铁的时候，都能看到便利店里面贴了大大的云闪付广告，只要用云闪付就能减免多少多少元。不得不说这一次的云闪付红包力度确实还可以，不过就在我点入她的分享链接时，出于职业敏感型的我，注意到了一件事。</p><h2 id="验证与复现"><a href="#验证与复现" class="headerlink" title="验证与复现"></a>验证与复现</h2><p>为了验证我的这个猜想，我打开了新浪微博，然后搜索<strong>“云闪付，分享”</strong>这些关键字。</p><p>首先随便找到一个分享链接</p><p><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1fo9xc642ouj312m0iiq7c.jpg" alt="pic1"></p><p>然后点入分享链接后截取他的URL参数</p><p><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1fo9xc62881j31kw06f7h9.jpg" alt="pic2"></p><p>最后将这段参数Base64一下以后，手机号就直接出来了</p><p><img src="http://ww2.sinaimg.cn/large/0060lm7Tly1fo9xc4inl8j30rq0gidho.jpg" alt="pic3"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从这通操作来看，这次红包分享的内部应该是直接用手机号作为数据库的主键，但是在URL加密构造上实在是太忽视广大人民群众隐私的安全性了。虽然手机号泄露这种听上去并不可怕，但是正是这种日常的泄露经过社工库不断地汇总才会导致一个人的安全隐私被逐渐曝光。其实光是有手机号往下就能继续去做很多事情。这里就暂且不表了。</p><h2 id="附记"><a href="#附记" class="headerlink" title="附记"></a>附记</h2><p>本来是想告诉大家这次的银联红包活动既然出了这个差错，就不要把自己的红包链接分享给陌生人，自己熟悉的人内部玩玩就可以了。不过刚刚登录了一下微博看到这个BUG已经修复了，看来银联自己终于意识到了这个问题。估计这个项目的负责人今年这个年也不大好过啊。然而在2月8号之前的分享链接依然存在这个问题，想要用银联撸羊毛的同志们记得将自己8号以前的分享删除，换上新的分享链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前记&quot;&gt;&lt;a href=&quot;#前记&quot; class=&quot;headerlink&quot; title=&quot;前记&quot;&gt;&lt;/a&gt;前记&lt;/h2&gt;&lt;p&gt;这几天公司里的事情忙的七七八八了，再加上马上要过年了实在是有点提不起劲。就在我一边刷刷知乎，一边改改代码的时候，突然看到了一个我关注很久的大V的一个分享活动，说白了就是银联送钱送红包的活动。我一看，还有这等好事儿，便点了进去。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018年的第一行代码</title>
    <link href="http://Yisaer.github.io/2018/01/02/2018firstCode/"/>
    <id>http://Yisaer.github.io/2018/01/02/2018firstCode/</id>
    <published>2018-01-02T13:48:07.000Z</published>
    <updated>2018-01-02T15:16:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>本来想在2017年结束前写一篇名为《2017年的最后一行代码》作为年末总结，可惜跨年休息的那几天在家又要忙工作里的项目，又要开始准备毕业论文的开题报告，<del>顺便还忙里偷闲和小金打了一把文明6和风暴英雄</del>，直到2号的晚上才有空闲时间来好好写一篇博客，于是就干脆就起了这个一个题目。</p><p><img src="http://ww1.sinaimg.cn/large/0060lm7Tly1fn2mld6stpj30jo0cxzuv.jpg" alt="pic"></p><a id="more"></a><h2 id="这些日子"><a href="#这些日子" class="headerlink" title="这些日子"></a>这些日子</h2><p>最近这些日子，可真是忙死我了。本来在公司里做做打杂的活儿，作为一个小研发实习生，调研调研公司里程序员的需求，接几个mentor布置下来的小任务，写一些辅助开发的工具包，发布到nexus服务器上然后给大家写封邮件告诉大家：嘿，我写了一个新工具，可以帮你们在工作中的哪些哪些方面提供一键操作，提高效率。 就是这样水润水润的生活，闲下来还能刷个知乎，吃吃公司里的免费水果零食，一下午就过去了。 结果就在某一天的早上，mentor突然给了我一个看上去挺小的算法需求，并说诶这就是个小问题，感觉跟你们以前打的ACM很像啊，你去解决一下吧。 得，研发就是要去做开发大爷们没(bu)时(yuan)间(yi)去写的工作，看了下Jira上的相关需求，然后国内外搜了下相关资料。尼玛， 这居然是个NP-hard问题啊！！</p><p>意识到事情开始变得我无法掌控时，只能拿出作为实习生最为无赖的一招：甩锅给你的mentor，哭诉着说啊呀我做不到啊这好难啊。 可要不怎么说天无绝人之路呢，我的Mentor听完我调研完的报告后，跟我讲了句没事儿这事儿还有我在就先暂缓了。 我嘴上说了一句哎呀靠谱啊，心里想着我的甩锅绝技真是越来越娴熟了。</p><p>周末的时候我玩着Overwatch的时候，突然发现和尚这个英雄特别有意思，就在沉浸在五连珠秒人和与源氏斗智斗勇中，突然企业微信响了。我接过一看，mentor的消息。原来他调研了一下以后找到了几篇论文，看了以后觉得论文里提供的方法可行性比较高，让我试着复现一下。</p><blockquote><p><strong>试着复现一下</strong></p></blockquote><p>当时读到这几个字的时候我简直一口老血吐出来。也是从这开始，传说中美滋滋的实习生活也终于离我而去。</p><h2 id="一个短会"><a href="#一个短会" class="headerlink" title="一个短会"></a>一个短会</h2><p>自从那个周末以后，我就开始茶不思饭不想，整天就在那琢磨那几篇论文说的到底是个什么东西，我到底该怎么办。精神也萎靡了，人也变得不爱说话了，博客也变得没时间写了，游戏也玩的不得劲了。回想起刚开始一边啃论文，一边根据伪代码复现的时候，真的是从一步步猜测的基础上，慢慢用各种假想用例和测试用例去验证自己的写法是否符合论文的结果。 那时候一天的日常就是别人在实习，我也在实习；别人下班了，我也下班了；别人开始玩游戏的时候，我在家看论文做复现；别人去睡觉了，我才开始玩游戏。 所以也经常会一两点才睡觉。到公司的时间也一点点的往后推了，本来第一天实习报道的时候是9点到了公司，后来就一天天比前一天晚到个几分钟，现在终于稳定在十点十分了。</p><p>后来某一天下午，mentor跟我说待会开个短会，和广州分公司那边的人以及与杭州总部的人沟通交流一下这个项目的进度。 要不怎么说互联网公司管理扁平化呢，通过微信开个语音会议的总人数就四个人，上海是我和mentor，广州那边是个下游公司的负责人，总部来的则是供应链的总监兼副总裁。真是随随便便就见到上级了。 会议一开始还是主要听mentor和大佬在那叽里呱啦吧，一方面是我是个实习生不大好指手画脚，另一方面我也确实写了一天程序有点累了。 然而这个项目现在的主要负责人有且只有我一个，所以大部分时候还是有很多情况和问题需要从我这里了解一下，逃不掉啊。</p><p>最后开会结束后杭州那边的总监希望我们能去总部当面交流一下，mentor为我一脸高兴的答应了下来。然而我心里想的却是天哪我不想出差去杭州啊，跑来跑去好麻烦呀。如果是以前大学上课的那会，以我下雨天就翘课的习惯来看，多半是超不愿意。不过想想放总监鸽子好像也有点太遭不住了。得，只能出差一趟了呗。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>后来顺利去了杭州，碰上了个不巧的下雨天，恰好杭州的交通状况真的是非常诡异，到处修地铁不说，这马路也修的高高低低简直遭不住了。 到了总部以后，没等多久就见到总监了。其实在见面之前，我一直没有好好介绍我自己，所以其他人都以为负责这个项目的是个比较有资深经验的人或者是专家啥的。不过因为上海这边实在是太缺人了，所以只好把这个任务实验性的交给我来做做调研，不过从目前来看确实效果还不错。所以当总监见到我这么年轻并且还是个实习生的时候，他被惊讶到的表情确实让我暗爽了一下。</p><p>回到上海以后，我后面的所有其他实习安排，我的mentor都帮我推掉了。想到前几礼拜我们的PM还一直请我们吃饭，并且希望我能去帮忙国际化业务那边的后端工作，结果我现在抽不出时间了想想还是挺不好意思的。然而做这个复现的工作真的是太苦逼了，上周五的时候我下班前统计了一下整个项目目前的代码量，一周以内我居然写了足足两千多行的代码，考虑到还有推到重来删掉的代码，保守估计我一周估计敲了三千行代码吧，简直高产<del>如母猪</del>. 每次都快觉得玛德写不下去我想放弃了的时候，mentor总是会说一些等这个算法写完这个项目就是整个被你所own来<del>威逼</del>利诱,被他这么一说，我想了想还是继续点下debug这个按钮开始找bug. 为了star, 只能头皮上了。</p><p>在今天过年后回到公司的第一天，我终于在下班前写完了整个算法的大体骨架，接下来就可以开始对各个小模块进行开发与测试。大体上的来说，虽然任务依旧艰巨，但是至少前景可期。等忙完这个项目，后面就会慢慢展开毕业设计，国际化项目等等一系列的事情。</p><p>2018年，既是一个崭新的开始，也是2017年的一种延续。2018年的第一行代码，我正马不停蹄的为2017年所开的坑来不停的填坑，如果说要有一个新年愿望的话，我觉得在之前的这段时间的转变，是我成长的最快的一段时间，我希望在2018年的我，也能一直像去年一样，永远心态年轻，永远有机会成长。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;本来想在2017年结束前写一篇名为《2017年的最后一行代码》作为年末总结，可惜跨年休息的那几天在家又要忙工作里的项目，又要开始准备毕业论文的开题报告，&lt;del&gt;顺便还忙里偷闲和小金打了一把文明6和风暴英雄&lt;/del&gt;，直到2号的晚上才有空闲时间来好好写一篇博客，于是就干脆就起了这个一个题目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/0060lm7Tly1fn2mld6stpj30jo0cxzuv.jpg&quot; alt=&quot;pic&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://Yisaer.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>生活与工作</title>
    <link href="http://Yisaer.github.io/2017/09/29/Life/"/>
    <id>http://Yisaer.github.io/2017/09/29/Life/</id>
    <published>2017-09-29T14:17:15.000Z</published>
    <updated>2017-12-28T16:20:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近日子过得不温不火，感觉自己的神经不经意的放松了下来。这两天闲来无事的时候就偶尔打两把守望先锋然后刷刷知乎。前两天终于把自己心里的一块大石头给解决了，算是正式决定好了校招offer的去向。虽然校招的offer是可以毕业以后再去工作的，签了两方协议后，十一长假过后我就决定去那边先实习起来了。 很久没写博客了，这次也算想到什么写什么吧。 很杂，标题之间也没什么逻辑性。 2333</p><blockquote><p>有时候我会想，大学的这几年对我的改变真的很多。随着这几年一点点过去，我有一种强烈的想要能靠自己的力量做到什么的欲望。而如今，我也算是一个有着手艺技能的职业人了吧</p></blockquote><a id="more"></a><h2 id="大学"><a href="#大学" class="headerlink" title="大学"></a>大学</h2><p>有时候我会偶尔回想起从前大学刚开始的日子，那个时候我只不过是一个只会玩游戏，考试前看看书临时抱佛脚的学生。后来在专业分流的时候果不其然的掉档没有去成计院。也是那个时候心里突然觉醒了一种我是真的很想学习计算机的欲望，一直从大二开始马不停蹄的每天提升自己，又害怕自己野路子走错了方向，不停辗辗转转的日子从打ACM开始，到后面转入计算机学院，再到不停的上课完成学分。一直觉得自己什么都不会，那时候每天7点起床到计院的实验室开始一天的生活，一直到晚上8点离开实验室，回到寝室看书到12点的生活在大三过了一年后，拿到了投行实习offer开始步入社会。暑假实习的时候去了大摩，随后在十周的summer intern告别大摩后。我又紧接着去了daocloud做容器开发的实习。</p><p>当然现在我也都不在两家公司干了，最近也是刚刚拿到并决定好了校招offer的去向。工作环境是在淮海西路的大厦里，我非常喜欢这种高档写字楼的感觉，附近也都是蛮繁华小资的商圈，算是满足了我虚荣心作祟的要求吧。坐地铁过去也只有半小时，10点弹性上班的条件也很适合我这种爱睡懒觉的懒癌。给我一个应届生开的条件每年的工资啊年终奖啊补贴啥的七七八八凑在一起也有个二十多万感觉养活自己也是绰绰有余了。回过头来想想，自己现在能在一个互联网公司里面做着自己喜欢的开发方向，也许正是以前的失败打醒了自己吧。 有时候生活就是这样，永远也预料不到以后的发展。比起当初得知自己专业掉档了那种人生完蛋的感觉，人还是坚强的过好当下更为现实。</p><h3 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h3><p>在学校里，我只是一个学生，我只用关心好我自己的学习就行了。现在融入了社会，我觉得我虽然是计算机系的出身，但是还是应该要把视野放的广阔一点。因为之前在投行实习的关系，多多少少接触了金融方面的一些知识。渐渐的开始关心起来如何理财。感觉自己在作为一个学生的时候，实在是没什么科学的用钱观念，我觉得这样也不大合适。正好实习赚了一笔钱，拿出了一小部分去做了点投资玩玩，就当试试水。</p><p>另一方面，实习的时候发现中午的时候老是要去商城里去吃饭，一个月下来也是一笔不小的开销。决定趁现在这个大四的时间，继续学习烧菜做饭这些事情，希望以后自己可以成为一个能自己给自己烧饭的初级厨师(这个想法很迷)</p><h3 id="实习的日子"><a href="#实习的日子" class="headerlink" title="实习的日子"></a>实习的日子</h3><p>在大摩的日子里，每天的日子里不算开心，也不算不开心吧，只是有一种隐隐的压抑。回想起之前刚来的时候，壮志踌躇的要让把实习任务尽心尽力的完成。可是在投行里的这个氛围，我一直觉得有一种对我冷冰冰的感觉。这是一种很难表述的感觉，我和另外一个实习生负责一个项目的不同部分。很多时候，我被分到的任务都是极为苦逼并且连我的组长自己也讲不清楚该怎么做，所以我只能连猜带蒙的一遍遍的试错，一遍遍的寻找正确的方法。在我的实习过程中，有很多公司内部所必须用到的工具链是没有具体的文档的，靠的都是口口相传的方法一个个教。偏偏我的实习mentor在为给我制定了所需要的工具以后，他竟自己也讲不清到底该怎么正确使用。我记得我最痛苦的一段时间，是要将我所写好的程序通过Jenkins打包构建，但是因为这次使用的集成工具用的是gradle，所以我经理在自己也不怎么会的情况下，让我去使用这个工具。而一次打包构建的过程大概需要花30分钟，每一次出错，我都要通过一个Log信息高度抽象高度集成的Console中去查找，大部分时间是猜测，出错的理由。 最后在70多次尝试后我终于成功了。当然鉴于公司内部是没有使用文档和例子的，所以我的项目也作为了他们未来使用gradle构建项目的base structure.至于配置为什么这样设置，以及未来如何扩展，可能以后就要交给下一个实习生吧。笑</p><p>如果只是技术上的劳心，我觉得倒也可以接受。毕竟作为这个专业的人，排查bug的心理素质还是需要过硬的。真正让我感到伤心的，是我感受到的冰冷的相处对待。我们一直说企业的人文关怀，是希望能让工作的人在公司里能顺心的工作。但我并不是想说公司缺少这种人文关怀，如果说你和公司的圈子一致的话，你还是会感受到浓浓的人文关怀。但是说实话我作为母校这几年第一个到大摩里面实习的学生，一方面我在来之前感到很自豪，一方面在我来了以后我才知道这又有多么无助。我觉得校友圈子是在工作中融入环境的一个很快的方式。事实上我也觉得和我合作的另外一位实习生因为和组里的大多数人都是一个校友圈子的，收到的关怀也是无微不至。反观我每次有问题发给我的mentor和组长，他们也都是大部分时间视而不见，邮件不回，skype不回，微信不回。这种感觉真的让我很无奈，也很自卑。我的程序部署需要权限，我每天都在内网系统提出申请，也一直都是无人问津，就看着他一天天过期，然后我一天天提，周而复始。一件小事硬是拖了两个多礼拜。</p><p>在实习期间有很多次hr调查，希望能得到每位实习生的反馈。那个时候我不希望把自己和组里的关系搞僵，所以一直在反馈里多次提到wonderful corporation，还让组长签字。 现在想想真是有点好笑，难道他们是怎么区别对待的，我们会心里没有点B数么？不过现实中当然还是，表面wonderful的，愉快的提交了上去。</p><p>因为我的权限迟迟没批下来，最后为了把项目上线部署时才终于想起我了。而这个拖了我几个礼拜的破事儿也在我拿到权限后两三天内解决了。在这漫长的被冷处理过程中，组里一次次的给另外一个实习生各种机会去做presentation宣传我们这次项目用了angular以后，performance是多么的好，学到的是多么的丰富。我看着展示上的成果，心里想着这个实习项目里面，我独自一个人在一片未知领域里一遍遍的去试错，猜测，才终于让他可以被展示出来。但是功劳却都到了另外一个实习生的身上，仅仅是因为她写的是angular，是一种很fashion可以show出来给人看的东西。我不仅苦笑感觉自己学错了领域。</p><p>十周的实习结束后，我离开了大摩。在这十周里面，我觉得我学到的，感受到的，很多并非是一种技术上的，而是一种心态上的。后来陆续知道了关于大摩的转正offer和待遇，我觉得大摩不适合我，也不需要我。</p><h3 id="去上汽做开发"><a href="#去上汽做开发" class="headerlink" title="去上汽做开发"></a>去上汽做开发</h3><p>我受同学推荐来到了daocloud做容器平台的开发。而我这次负责的项目，则是去了上汽内部驻场做私有云平台的开发。这次做的开发方向比起以前的Web，我觉得还是非常有意思的，我也觉得容器云是以后的一个非常火热的方向，为数不多暂时还未被完全普及的应用。国企的氛围与外企还是有很多不同的，但是让我印象最为深刻的还是这么一件事。就是上汽集团请我们吃饭。</p><p>结果我一个多年来滴酒不沾的学生，在这种国企的饭局文化里实在是为了给公司面子，只能在那一直给领导啊啥的敬红酒，搞得虽然我酒量还行吧，但是国企里面这种只有喝的人脸潮红了才能算给足面子了，“到位”了的这种文化我是真的不喜欢，所以因为这件事我也决定不想在这种环境下工作，就选择了离开。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;最近日子过得不温不火，感觉自己的神经不经意的放松了下来。这两天闲来无事的时候就偶尔打两把守望先锋然后刷刷知乎。前两天终于把自己心里的一块大石头给解决了，算是正式决定好了校招offer的去向。虽然校招的offer是可以毕业以后再去工作的，签了两方协议后，十一长假过后我就决定去那边先实习起来了。 很久没写博客了，这次也算想到什么写什么吧。 很杂，标题之间也没什么逻辑性。 2333&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有时候我会想，大学的这几年对我的改变真的很多。随着这几年一点点过去，我有一种强烈的想要能靠自己的力量做到什么的欲望。而如今，我也算是一个有着手艺技能的职业人了吧&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://Yisaer.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>在大摩实习的日子</title>
    <link href="http://Yisaer.github.io/2017/07/16/intern1/"/>
    <id>http://Yisaer.github.io/2017/07/16/intern1/</id>
    <published>2017-07-16T14:35:58.000Z</published>
    <updated>2017-12-28T16:20:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>这段时间的实习生活非常有意思，也见到了很多非常有趣的人。走出校园的这段时间内让我见识到了过去的我眼界还是非常的狭隘，也见识了真正的生产环境内是如何运作并盈利的。非常开心能来到大摩，特此记录一下这段时间的感受。</p><blockquote><p>当我拿起那本记录了所有实习生资料的手册后，我竟发现八十个实习内，我是唯二来自211学校的，而这当中的四分之三的学生，全部来自清北交复。</p></blockquote><a id="more"></a>    <h2 id="一些说在之前的话"><a href="#一些说在之前的话" class="headerlink" title="一些说在之前的话"></a>一些说在之前的话</h2><p>这礼拜四在家跑程序的时候，突然整个电脑卡住，重启以后发现主磁盘都找不到了。。。 送到iapm的苹果店查了一下发现是硬盘的总线坏了。 一天时间以内维修人员就帮我修好了非常开心。。。前几天回到家因为都是处于没笔记本用的状态不能写程序，就看看书顺便把之前挖下的redis大坑填了一部分。 仔细想想这段时间，感觉自己渐渐从一个宅在实验室里的大学生逐渐变成了一个早九晚六的社会人… 身为计算机院的学生，可能各位对于在BAT等互联网大厂的实习或者工作经历都看过不少了，但是在摩根斯坦利这样的投行的体验应该很少看到.. 今天拿回笔记本后想特地谈谈这段时间实习的感受，为后面的学弟学妹做个参考。</p><h2 id="初到大摩"><a href="#初到大摩" class="headerlink" title="初到大摩"></a>初到大摩</h2><p>第一次去大摩的时候，还是最终面试那块。那个时候还是比较冷的冬天，我和同学都收到了参与最终面试的资格，我们定在了同一天面试以后，在那天一起去了大摩面试。大摩的上海开发部处于浦东嘉里城这块，坐地铁去非常方面。对于上大的学生来说坐七号线直接坐到终点站花木路即可。我直接面试的几家公司要么就是一整栋楼都是办公楼的那种，或者是小公司在浦东的别墅区里落位。嘉里城属于下层建筑为各种商铺区，上层留给做办公区，我觉得这还挺方便的。当时第一次进到大摩内部时我感叹的最多的便是大摩内部整体的安全性。和互联网公司不同，大摩的安全性可以说是做的很厉害，如果没有工作证的话可以说在大摩内部是寸步难行。</p><p>在经过面试和等待以后，最终我还是被通知了拿到了暑期实习的offer，从七月份开始了实习生活。实习的第一天，基本上是个和公司内部各路人见面，熟悉熟悉team的过程。我们每个人在进公司后都拿到了关于整个实习的计划书，后面还有每个实习生的资料。结果不看不知道，一看吓一跳。大摩的暑期实习的招收对象应该是全中国的范围，也就是说在全中国大学招的实习生最后都来了上海地区的总部。我看了下号码编排实习生数量大概是八十个左右，也就是说每年会从全国招八十个左右的实习生。在实习生资料一览内，会有每个实习生的简短的资料，这上面最有意思的资料便是说明了你来自哪所大学。当时我看完所有实习生资料以后，我的内心大概有如下这么几个结果</p><ul><li>八十个实习生内，将近差不多一半来自上海交大</li><li>剩下的四十个实习生内，将近三十个来自清华北大复旦同济</li><li>最后十个不到的学生差不多是北邮，南大等学校</li><li>我的学校应该毫无疑问是这当中最不起眼的</li></ul><p>来到大摩之前，听到身边人对我的恭喜我还有点小开心，然而在这第一天上班的大热天，我的心拔凉拔凉的低落。。。</p><h2 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a>开始工作</h2><p>好在第一天的见面工作结束以后，第二天就直接开始到办公区域内开始进行项目的立项与设计了。在短暂的与组长和组员谈论完短期内的目标后。我就坐到位子上火急火燎的开始进行准备工作了。大摩的环境搭建还是非常方便的，任何需要的软件或功能都可以直接在内网里直接下载并安装，非常简单方便。不过在这点上还是我觉得还是微软做的最后，听在微软实习的同学说，他们的环境搭建就是双击一个执行文件就可以全自动执行了，对此我只想说老铁双击666…</p><p>好在坐在电脑前的这种熟悉的感觉，让我暂时忘记了第一天看实习生资料的低落感。但就在简单的安装好了环境以后，我就碰到了我在大摩里碰到的第一个困难。神TM内网里我申请安装一个基本框架却装不上，和同学与HR反映与谈论这个问题以后，解决办法就是要拨打内网的技术支持电话，让运维人员帮我安装。于是我拨通了内网电话的那刻，我突然意识到大摩是一家美国公司，第一天老总给我们演讲时用的也是英语，那么我在电话里沟通的时候到底是用中文还是英文？简短的思考了下我觉得肯定是使用英语。虽然我英语成绩一般，但是对自身的口语还是稍有自信，可能平时有用到英语交流的机会时其实都是跟国人交流，当我听到电话的那端传来了一声咖喱风味的Hello时，我愣住了。 因为我意识到了一个事实，大摩不亏是一家全球都有分部的公司，很明显的我这通技术支持电话并不是打给上海分部的运维人员，而是直接转线到了印度分布的技术支持，也就是说我现在打的是一通国际电话。。稍微平复了一下紧张的心情以后，我简短的将我遇到的问题以及我需要的帮助表达给了技术人员。。幸运的是他理解了我的话，然后很自然快速的在电话里回复了我一堆噼里啪啦噼里啪啦，并很明显的需要我在电脑上做某些操作。。 而我就像一个缓冲区极小的套接字，非常尴尬的表达了自己没有听清，能否重复一遍。电话那端的技术人员当时就理解的笑了，并缓慢的将关键操作告诉了我，万幸的是在这次以后我跟他终于可以开始互相交流，整个技术支持的过程就愉快的结束了。</p><p>和国内的互联网企业相比，在大摩这样的外企，并且是在全球都有分布的企业里，掌握口语交流能力真的是十分重要，否则在交流上会很有困难。</p><h2 id="实习项目"><a href="#实习项目" class="headerlink" title="实习项目"></a>实习项目</h2><p>我的办公位比较靠近通往我们这一楼的玻璃门，在那玻璃门的对面就是我们这一层的会议室。所以，每次我们组需要讨论东西，组长就直接在内部系统上预约一个会议议程，然后我们可以很方便的拥有使用会议室的权限，在里面开组会讨论项目。我在实习项目内负责的模块对我来说似乎是刚刚好，既不是完全陌生，也不是特别熟悉，属于需要花点时间去掌握然后就可以正式进入生产环节，我个人对此还是比较满意。毕竟做一个完全陌生的东西属于对我之前所有的经验与知识而言都作废重来，而做一个完全熟悉的东西则是将有限的时间浪费在了无意义的重复劳动上。但是在实习的第一个礼拜，我感觉我每天都过得非常难受，这种难受并不是指心里上的难受，而知是一种体验上的难受，因为过去我作为一个学生，在开发上有着完全的自由，我想用什么技术用什么技术，我想怎么解决就怎么解决，需求，模型都可以自己决定。但是当来到了大摩以后，首先需求这种东西就不可能是我自己来定，而是我要先摸清我所负责项目的业务部分，之后才能开始展开工作，而这块对我来说可以说是完全陌生的。其次，就是技术，框架，环境的选择，也是并非我可以自己决定。一方面出于对安全的考虑，一方面有着组内的各种原因，首先我能用的技术只能从大摩内部的库中申请，其次用什么技术也要考虑到业务，性能，以及可维护性等多方面因素，所以在一开始选择框架技术的时期内，在我这块可以说是变动非常大，可以说在主框架上我经历了两次转换，在数据库技术上也经历了两次转换，而每次转换时都需要我花费个人时间来掌握这些技术，这对我来说当时节奏还是非常紧凑的。</p><h2 id="开发项目"><a href="#开发项目" class="headerlink" title="开发项目"></a>开发项目</h2><p>如果说在学校里做个人开发的那段日子就像无拘无束的飞在天空，那么在企业里做开发工作则像带着铐链在那跳舞。在刚进入开发的那段时间内，我大部分时间都花在了调整配置，理清业务关系，确定需求，审视程序全局的连通性并为其做单元测试。在这段时间里，很多我在平日只要1秒钟就能解决的事情，放在公司里可能换一天也没有什么进展。这里我就要吐槽一下大摩的技术栈了，作为投行而言，系统最重要的是稳定性与安全性，新技术的引进是非常严格的，并且是迫切需要才会引进。而面向内部开发的组也是更不用太去关心新技术的演变，只需要保证现有的系统安全稳定即可。所以技术的革新演变与外面的互联网企业相比是比较落后的。可以说我现在负责的项目所有的框架技术是较为老的，所以在填坑的路上也是困难重重。第二周的前两三天我可以说是每天愁眉苦脸上班，然后每天愁眉苦脸下班，想了想今天做了很多，但又好像什么都没做。不过终于在我这么几天放弃午休并且加班到七点多的努力下，我对整项目的code struture的改造总算符合了我作为处女座对自己的代码洁癖，这让我感到很开心。</p><p>后来的几天就过得比较开心了，理清了业务关系后的几次组会，前端提的每个需求我都在当天接需求然后都当天完美交付了。我觉得这高效率的开发过程和我之前痛苦的去适应去了解的前提是密不可分的。</p><h2 id="一点感想"><a href="#一点感想" class="headerlink" title="一点感想"></a>一点感想</h2><p>在最初的实习中，每次碰到困难以后我都十分烦躁，甚至有了打退堂鼓的想法。但是正如大家所见，像大摩这样的外企对给予offer是有target school的倾向的，而毫无疑问交大是大摩内最为吃香的学校。而我作为上大的学生，似乎是最近这好几年来第一个拿到这次summer intern的学生，况且我能有这次实习的机会，也离不开上大开源社区初代目学长给予的机会和帮助。直白的说，我的表现会直观的映射在大摩对上大的看法，如果我中途放弃或者消极对待，这明显会对后面的学弟学妹对进入大摩这样的公司造成负面的影响。于是我每次遇到很多匪夷所思的Bug时，我内心都会反复平静自己，不要生气，要知道自己现在代表着学校。现在这段艰难的适应期度过，我对自己目前的表现还算满意，希望自己可以顺利度过这段实习期，给后面的学弟学妹们做个榜样。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;这段时间的实习生活非常有意思，也见到了很多非常有趣的人。走出校园的这段时间内让我见识到了过去的我眼界还是非常的狭隘，也见识了真正的生产环境内是如何运作并盈利的。非常开心能来到大摩，特此记录一下这段时间的感受。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当我拿起那本记录了所有实习生资料的手册后，我竟发现八十个实习内，我是唯二来自211学校的，而这当中的四分之三的学生，全部来自清北交复。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://Yisaer.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Redis中利用sizeof从sds转为sdshdr</title>
    <link href="http://Yisaer.github.io/2017/05/07/Redis1/"/>
    <id>http://Yisaer.github.io/2017/05/07/Redis1/</id>
    <published>2017-05-06T17:29:32.000Z</published>
    <updated>2017-12-28T16:22:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>今天在阅读 Redis 源码时看到 sds.h 中的 sdslen 和 sdsavail 中看到一行语句不是很理解</p><pre><code>struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));</code></pre><p>最后查了资料终于明白了，特此记录一下。</p><a id="more"></a><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>这里 s 是 const sds 类型，相关类型定义如下</p><pre><code>typedef char *sds;struct sdshdr {    unsigned int len;    unsigned int free;    char buf[];};</code></pre><p>当使用 sdsnewlen(const void *init, size_t initlen) 创建一个新的动态字符串时，Redis 会创建一个 struct sdshdr *sh 结构体，并将这个结构体的最后一个字符数组，也就是 sh-&gt;buf 返回，这样返回值是个普通的 C 字符串，因此便可以使用一些 string.h 和 stdlib.h 中的 C 字符串函数，而当想访问 sds 的 len 和 free 属性时，就需要先转成 struct sdshdr 结构。但是直接用 s-(sizeof(struct sdshdr)) 却是不知道怎么回事。</p><p>后来直接使用那一行代码进行 Google，然后找到了结果。</p><p><strong>C99 中的标准规定</strong>：</p><p>As a special case, the last element of a structure with more than one named member may have an incomplete array type; this is called a flexible array member. In most situations, the flexible array member is ignored. In particular, the size of the structure is as if the flexible array member were omitted except that it may have more trailing padding than the omission would imply.</p><p>However, when a . (or -&gt;) operator has a left operand that is (a pointer to) a structure with a flexible array member and the right operand names that member, it behaves as if that member were replaced with the longest array (with the same element type) that would not make the structure larger than the object being accessed; the offset of the array shall remain that of the flexible array member, even if this would differ from that of the replacement array. If this array would have no elements, it behaves as if it had one element but the behavior is undefined if any attempt is made to access that element or to generate a pointer one past it.</p><p>struct sdshdr 结构体中的最后一个 char buf[] 被称为 flexible array member ，在计算结构体大小的时候是不记入在内的，因此 sizeof(struct sdshdr) 实际上就是 sizeof(unsigned int) + sizeof(unsigned int) 这样就能理解了。</p><pre><code>-----------|5|0|redis|-----------^   ^sh  sh-&gt;buf</code></pre><p>所谓的 sizeof(struct sdshdr) 实际上是就是 len 和 free 所占的大小，因此用 sh-&gt;buf 的位置减去 sizeof(struct sdshdr) 就是 sh 的位置了，再经过 struct sdshdr * 转换，就可以得到 sds 对应的 struct sdshdr 结构体了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;今天在阅读 Redis 源码时看到 sds.h 中的 sdslen 和 sdsavail 中看到一行语句不是很理解&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后查了资料终于明白了，特此记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="http://Yisaer.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>do{...} while(0) 的意义和用法</title>
    <link href="http://Yisaer.github.io/2017/05/07/dowhile/"/>
    <id>http://Yisaer.github.io/2017/05/07/dowhile/</id>
    <published>2017-05-06T17:12:22.000Z</published>
    <updated>2017-12-28T16:19:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>linux内核和其他一些开源的代码中，经常会遇到这样的代码：</p><pre><code>do{ ...}while(0)</code></pre><p>这样的代码一看就不是一个循环，do..while表面上在这里一点意义都没有，那么为什么要这么用呢？</p><p>实际上，do{…}while(0)的作用远大于美化你的代码。</p><a id="more"></a><h3 id="辅助定义复杂的宏，避免引用的时候出错："><a href="#辅助定义复杂的宏，避免引用的时候出错：" class="headerlink" title="辅助定义复杂的宏，避免引用的时候出错："></a>辅助定义复杂的宏，避免引用的时候出错：</h3><p>举例来说，假设你需要定义这样一个宏：</p><pre><code>#define DOSOMETHING()\               foo1();\               foo2();</code></pre><p>这个宏的本意是，当调用DOSOMETHING()时，函数foo1()和foo2()都会被调用。但是如果你在调用的时候这么写：</p><pre><code>if(a&gt;0)    foo1();foo2();</code></pre><p>这就出现了问题，因为无论a是否大于0，foo2()都会被执行，导致程序出错。</p><p>那么仅仅使用{}将foo1()和foo2()包起来行么？</p><p>我们在写代码的时候都习惯在语句右面加上分号，如果在宏中使用{}，代码里就相当于这样写了：“{…};”，展开后就是这个样子：</p><pre><code>if(a&gt;0){    foo1();    foo2();};</code></pre><p>这样甚至不会编译通过。所以，很多人才采用了do{…}while(0);</p><pre><code>#define DOSOMETHING() \        do{ \          foo1();\          foo2();\        }while(0)\...if(a&gt;0)    DOSOMETHING();...</code></pre><p>这样，宏被展开后，才会保留初始的语义。GCC提供了Statement-Expressions用以替代do{…}while(0); 所以你也可以这样定义宏：</p><pre><code>#define DOSOMETHING() ({\        foo1(); \        foo2(); \})</code></pre><h3 id="避免使用goto对程序流进行统一的控制："><a href="#避免使用goto对程序流进行统一的控制：" class="headerlink" title="避免使用goto对程序流进行统一的控制："></a>避免使用goto对程序流进行统一的控制：</h3><p>有些函数中，在函数return之前我们经常会进行一些收尾的工作，比如free掉一块函数开始malloc的内存，goto一直都是一个比较简便的方法：</p><pre><code>int foo(){    somestruct* ptr = malloc(...);    dosomething...;    if(error)    {        goto END;    }    dosomething...;    if(error)    {        goto END;    }    dosomething...;END:    free(ptr);    return 0;}</code></pre><p>由于goto不符合软件工程的结构化，而且有可能使得代码难懂，所以很多人都不倡导使用，那这个时候就可以用do{}while(0)来进行统一的管理：</p><pre><code>int foo(){    somestruct* ptr = malloc(...);    do{        dosomething...;        if(error)        {            break;        }        dosomething...;        if(error)        {            break;        }        dosomething...;    }while(0);    free(ptr);    return 0;}</code></pre><p>这里将函数主体使用do()while(0)包含起来，使用break来代替goto，后续的处理工作在while之后，就能够达到同样的效果。</p><h3 id="避免空宏引起的warning"><a href="#避免空宏引起的warning" class="headerlink" title="避免空宏引起的warning"></a>避免空宏引起的warning</h3><p>内核中由于不同架构的限制，很多时候会用到空宏，在编译的时候，空宏会给出warning，为了避免这样的warning，就可以使用do{}while(0)来定义空宏：</p><pre><code>#define EMPTYMICRO do{}while(0)</code></pre><h3 id="定义一个单独的函数块来实现复杂的操作："><a href="#定义一个单独的函数块来实现复杂的操作：" class="headerlink" title="定义一个单独的函数块来实现复杂的操作："></a>定义一个单独的函数块来实现复杂的操作：</h3><p>当你的功能很复杂，变量很多你又不愿意增加一个函数的时候，使用do{}while(0);，将你的代码写在里面，里面可以定义变量而不用考虑变量名会同函数之前或者之后的重复。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;linux内核和其他一些开源的代码中，经常会遇到这样的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;do{
 ...
}while(0)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样的代码一看就不是一个循环，do..while表面上在这里一点意义都没有，那么为什么要这么用呢？&lt;/p&gt;
&lt;p&gt;实际上，do{…}while(0)的作用远大于美化你的代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="http://Yisaer.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>浅析unix文件系统</title>
    <link href="http://Yisaer.github.io/2017/03/23/pwd/"/>
    <id>http://Yisaer.github.io/2017/03/23/pwd/</id>
    <published>2017-03-23T13:57:27.000Z</published>
    <updated>2017-12-28T16:22:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先这篇文章的原因在于前几天操作系统考试之前复习到文件系统那一块，发现书上关于目录，目录文件，索引结点这些说的十分模糊。光是看书完全没明白他在说什么，还好这块内容我在学习unix编程时接触过，这里特此做一个总结。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>文件包含数据，目录是文件的列表。不同的目录相互连接构成树状结构，目录还可以包含其他目录。那么如何理解文件在”一个目录中”？ 硬盘实际上是一个金属圆盘，每个盘面上都有磁性物质，这些圆盘又是如何显示为一个包含文件，目录的树状结构呢。</p><a id="more"></a><h2 id="从用户的角度看文件系统"><a href="#从用户的角度看文件系统" class="headerlink" title="从用户的角度看文件系统"></a>从用户的角度看文件系统</h2><p>从用户的角度来看，系统中硬盘里的文件组成了一颗目录树，每个目录包含了文件或者其他的目录。 我们可以通过常用的命令如: cd ,ls ,pwd 来查看目录或者文件的信息。很显然，文件的查看或者是更新都是任何一个操作系统都会提供的功能。 但是命令ln却并不常见，但却是unix里的一个基本操作。</p><p>假设我们输入以下命令</p><pre><code>touch xln ./x ./xlinkls &gt; ./xlinkcat ./x</code></pre><p>我们创建了一个文件叫做x，然后创建了一个链接指向了x文件，然后将ls的输出重定向给xlink的内容，那么当我们执行cat ./x的时候会发现输出了当前所在位置的文件信息。</p><p>从这些就可以大致了解了Unix的文件系统，硬盘上呈现了一个深度和广度都广泛延伸的目录树，Unix也提供了许多命令来和这种结构的对象一起工作。但他们是如何工作的？目录是什么？如何知道文件所处的目录？从一个目录转换到另一个目录意味着什么？ pwd又是如何得知你当前的位置？ 这些问题我们将继续探讨下去。</p><h2 id="Unix文件系统内部结构"><a href="#Unix文件系统内部结构" class="headerlink" title="Unix文件系统内部结构"></a>Unix文件系统内部结构</h2><p>硬盘的实质其实是由磁性盘片组成的计算机系统的一个设备。所谓的文件系统，其实就是对这个设备的多层抽象</p><h3 id="第一层抽象-从磁盘到分区"><a href="#第一层抽象-从磁盘到分区" class="headerlink" title="第一层抽象 从磁盘到分区"></a>第一层抽象 从磁盘到分区</h3><p>一个磁盘能存储大量的数据，一个磁盘可被分成区，每个分区都可以看做是一个独立的磁盘</p><h3 id="第二层抽象-从磁盘到块序列"><a href="#第二层抽象-从磁盘到块序列" class="headerlink" title="第二层抽象 从磁盘到块序列"></a>第二层抽象 从磁盘到块序列</h3><p>一个磁盘由磁性盘片组成，每个盘片的表面被分为很多同心圆，这些同心圆称为磁道，每个磁道又进一步被分成扇区，每个扇区可以存储一定字节数的数据。例如常见的每个扇区是512字节。扇区是磁盘的基本存储单元。</p><h3 id="第三层抽象-从块序列到三个区域的划分"><a href="#第三层抽象-从块序列到三个区域的划分" class="headerlink" title="第三层抽象 从块序列到三个区域的划分"></a>第三层抽象 从块序列到三个区域的划分</h3><p><img src="http://i1.piimg.com/567571/8a60dcee8bbabd0c.png" alt=""></p><p>文件系统可以用来存储文件内容，文件属性，和目录，这些不同类型的数据是如何存储在被编号的磁盘块上呢?Unix使用了一个简单的方法，将磁盘分成了三部分。</p><h4 id="超级块"><a href="#超级块" class="headerlink" title="超级块"></a>超级块</h4><p>文件系统中的第一个块被称为超级快，这个块存放文件系统本身的结构信息</p><h4 id="i节点表"><a href="#i节点表" class="headerlink" title="i节点表"></a>i节点表</h4><p>每个文件都有一些属性，如大小，文件所有者和最近修改时间等。这些性质都被记录在一个称为i节点的结构中，所有的i节点有相同的大小，文件系统中的每个文件都有一个i节点。</p><h4 id="数据区"><a href="#数据区" class="headerlink" title="数据区"></a>数据区</h4><p>文件的内容保存在这个区域，磁盘上所有的块的大小是相同的。如果文件包含了超过一个块的内容，则文件内容会存放在多个磁盘块中。 那么系统是如何跟踪这些独立的磁盘块？</p><h3 id="文件系统的实现，创建文件"><a href="#文件系统的实现，创建文件" class="headerlink" title="文件系统的实现，创建文件"></a>文件系统的实现，创建文件</h3><p>文件的内容和属性分区存放看起来很简单，但实际上是如何工作的额呢？ 创建一个文件时又会发生什么？如果我输入命令 </p><pre><code>who &gt; user</code></pre><p>当这个命令完成时，文件系统增加了一个存放命令who输出内容的新文件。 创建一个新文件的主要操作如下。</p><ul><li>存储属性，内核找到一个空的i结点，比如第47块，内核将文件的信息记录其中</li><li>存储数据，文件内容存储在数据区的块中，如627 200 992</li><li>记录分配情况，内核在i结点的磁盘分布区记录了上述块序列。</li><li>添加文件名到目录，新文件的文件名是user，unix内核将入口(47,user)添加到目录文件。</li></ul><h3 id="cat命令的工作原理"><a href="#cat命令的工作原理" class="headerlink" title="cat命令的工作原理"></a>cat命令的工作原理</h3><p>现在我们再回头看之前所打的cat命令。</p><pre><code>cat ./x</code></pre><ol><li>内核首先在目录中寻找文件名，得到x记录所包含的i节点号</li><li>定位所得到的I节点并读取数据块编号</li><li>访问存储文件内容的数据块，通过上面两步，内核已经知道文件内容在哪些数据块以及他们的顺序。</li></ol><h2 id="理解目录"><a href="#理解目录" class="headerlink" title="理解目录"></a>理解目录</h2><p><img src="http://i2.buimg.com/567571/aa4750bfcd875f4c.png" alt=""></p><p>用户看到的文件系统是目录与子目录的集合，每个目录能够包含文件和子目录，每个子目录有一个父目录，在文件系统内部，目录是一个包含文件名与i节点对的列表的文件。从用户的角度看到的是一个文件名的列表，而从Unix的角度看到的是一个被命名的指针的列表。</p><p><img src="http://i4.buimg.com/567571/e1230276c71cea9e.png" alt=""></p><h3 id="文件在目录中的真正含义"><a href="#文件在目录中的真正含义" class="headerlink" title="文件在目录中的真正含义"></a>文件在目录中的真正含义</h3><p>一般都说某个文件在某个目录中，但是现在已经知道目录中存放的只是文件在i节点表的入口，而文件的内容则存储在数据区内，文件在某个目录中，从用户的角度看文件y在目录demodir中，而从系统角度来看，看到的则是目录中有一个包含文件名y和i节点为491的入口。</p><p>简单的说，目录包含的是文件的引用，每个引用被称为连接，文件的内容存储在数据块，文件的属性则被记录在i节点的结构中，i节点的编号和文件名存储在目录中。目录包含子目录也同样如此。</p><h3 id="目录包含子目录的真正含义"><a href="#目录包含子目录的真正含义" class="headerlink" title="目录包含子目录的真正含义"></a>目录包含子目录的真正含义</h3><p>从用户的角度看a目录是demodir目录的一个子目录。实际上demodir包含一个指向那个子目录i节点的连接。从系统角度看，最上面一个表包含名为a指向277节点的连接。如何知道277是左边那个目录的i结点号呢？ 内核在每个目录中都设置了目录本身的一个i节点号的入口，称为”.” 。 子目录的父目录同理。</p><h3 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h3><p>在Unix的文件系统中，文件没有文件名，但是链接具有名字。文件仅仅拥有i节点号。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;先这篇文章的原因在于前几天操作系统考试之前复习到文件系统那一块，发现书上关于目录，目录文件，索引结点这些说的十分模糊。光是看书完全没明白他在说什么，还好这块内容我在学习unix编程时接触过，这里特此做一个总结。&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;文件包含数据，目录是文件的列表。不同的目录相互连接构成树状结构，目录还可以包含其他目录。那么如何理解文件在”一个目录中”？ 硬盘实际上是一个金属圆盘，每个盘面上都有磁性物质，这些圆盘又是如何显示为一个包含文件，目录的树状结构呢。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="http://Yisaer.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>编写命令解释器 上篇</title>
    <link href="http://Yisaer.github.io/2017/03/04/shell1/"/>
    <id>http://Yisaer.github.io/2017/03/04/shell1/</id>
    <published>2017-03-04T13:35:27.000Z</published>
    <updated>2017-12-28T16:22:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1488645051996&amp;di=f8cf376e2a064e93d603b6c80f6b7346&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.xitongzhijia.net%2Fuploads%2Fallimg%2F150528%2F64-15052Q106123F.jpg" alt="pic1"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这周操作系统的最后一个实验室写一个Shell，然而实验手册的pdf上只指明了你必须要完成什么函数，对于怎么写则是一点提示都没有。</p><p>所以本篇文章则立意于如何写出一个简单可用的shell，个人认为这个主题应该会分为上中下三篇文章来阐明从零开始的Shell编写过程</p><a id="more"></a><h2 id="Shell做了什么"><a href="#Shell做了什么" class="headerlink" title="Shell做了什么"></a>Shell做了什么</h2><p>简单的说，shell是一个管理进程和运行程序的程序，所有常用的shell有三个基本功能</p><ul><li>运行程序</li><li>管理输入输出</li><li>可编程</li></ul><h2 id="Shell是如何运行程序的"><a href="#Shell是如何运行程序的" class="headerlink" title="Shell是如何运行程序的"></a>Shell是如何运行程序的</h2><p>shell打印提示符，输入命令，然后就运行这个命令，随手再次打印提示符，如此反复。那么在这个过程中，背后到底有什么?</p><p>一个shell的主循环执行下面四步:</p><ul><li>用户输入</li><li>shell建立进程</li><li>shell将程序从磁盘载入</li><li>程序在他的进程中运行直到结束</li></ul><p>所以一个Shell的主循环可以写成</p><pre><code>while(!end_of_input)    get command    execute command    wait for command to finish</code></pre><p>所以要写一个shell ，就需要学会</p><ul><li>运行程序</li><li>建立进程</li><li>等待exit</li></ul><h2 id="一个程序如何运行另一个程序"><a href="#一个程序如何运行另一个程序" class="headerlink" title="一个程序如何运行另一个程序"></a>一个程序如何运行另一个程序</h2><p><strong>使用函数 int execvp(const char* file,char* const argv[])</strong> ,这个函数会从PATH变量所指的目录中查找符合参数file的文件名，找到后便执行该文件，然后将第二个参数argv传递给执行的文件。</p><h4 id="使用demo"><a href="#使用demo" class="headerlink" title="使用demo"></a>使用demo</h4><pre><code>main(){    char * arglist[3];    arglist[0] = &quot;ls&quot;;    arglist[1] = &quot;-l&quot;;    arglist[2] = 0;    execvp(&quot;ls&quot;,arglist);}</code></pre><h3 id="第一个Shell-Demo"><a href="#第一个Shell-Demo" class="headerlink" title="第一个Shell Demo"></a>第一个Shell Demo</h3><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>    <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>    <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>    <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> **prompting shell version 1</span></span><br><span class="line"><span class="comment"> **</span></span><br><span class="line"><span class="comment"> **Prompts for the command and its arguments.</span></span><br><span class="line"><span class="comment"> **Builds the argument vector for the call to execvp.</span></span><br><span class="line"><span class="comment"> **Uses execvp(), and never returns.</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>MAXARGS20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ARGLEN100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>CMDPROMPT<span class="meta-string">"Command please: "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ARGPROMPT<span class="meta-string">"next argument please: "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>prompt(n)printf(<span class="meta-string">"%s"</span>, (n)==0 ? CMDPROMPT : ARGPROMPT );</span></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span>*arglist[MAXARGS+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span>numargs;</span><br><span class="line"><span class="keyword">char</span>argbuf[ARGLEN];</span><br><span class="line"><span class="function"><span class="keyword">char</span>*<span class="title">makestring</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">numargs = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( numargs &lt; MAXARGS )</span><br><span class="line">&#123;</span><br><span class="line">prompt( numargs );</span><br><span class="line"><span class="keyword">if</span> ( gets(argbuf) &amp;&amp; *argbuf ) &#123;</span><br><span class="line">arglist[numargs++] = makestring(argbuf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( numargs == <span class="number">0</span> )</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">arglist[numargs] = <span class="literal">NULL</span> ;</span><br><span class="line">execute( arglist );</span><br><span class="line">numargs = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">execute( <span class="keyword">char</span> *arglist[] )</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">execvp(arglist[<span class="number">0</span>], arglist);</span><br><span class="line">perror(<span class="string">"execvp failed"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *</span><br><span class="line">makestring( <span class="keyword">char</span> *buf )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span>*cp, *<span class="built_in">malloc</span>();</span><br><span class="line"><span class="keyword">if</span> ( cp = <span class="built_in">malloc</span>( <span class="built_in">strlen</span>(buf) + <span class="number">1</span> ) )&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(cp, buf);</span><br><span class="line"><span class="keyword">return</span> cp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"out of memory\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="建立新的进程"><a href="#建立新的进程" class="headerlink" title="建立新的进程"></a>建立新的进程</h2><p>在学会了使用execvp函数以后，我们解决了第一个问题如何执行程序。 那么我们现在解决的第二个问题就是如何建立新的进程。 <strong>我们为何要建立新的进程？</strong> 假设我们已经为我们的程序写好了输入输出的接口，将参数传递给execvp函数以后，当函数执行完以后我们会发现我们的程序也结束了。 这显然不是我们想要的结果。</p><h3 id="为何会这样"><a href="#为何会这样" class="headerlink" title="为何会这样"></a>为何会这样</h3><p>如果我们做一个实验，在使用demo的execvp函数以后加一个输出语句，重新编译执行以后你会发现我们新加的打印消息不见了。 那么这条程序去哪了呢？</p><p>这个原因都是因为execvp函数，exec系统调用从当前进程中把当前程序的机器指令清除，然后再空的进程中载入调用的程序代码，exec调整进程的内存让他适应新的程序对内存的要求。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>为了解决这个问题，我们的解决方法之一就是复制一个进程，这样就可以继续原来的程序了。这就是系统调用fork做的事情。</p><p>进程调用fork,当控制转移到内核中的fork代码后，内核做:</p><ul><li>分配新的内存块和内核数据结构</li><li>复制原来的进程到新的进程</li><li>向运行进程集添加新的进程</li><li>将控制返回给两个进程</li></ul><h3 id="父进程如何等待子进程"><a href="#父进程如何等待子进程" class="headerlink" title="父进程如何等待子进程"></a>父进程如何等待子进程</h3><p>当使用fork函数后，我们会得到两个进程，其中一个进程是我们原本的进程，他执行了会继续执行shell的程序，而另一个进程则是我们fork出的一个子进程，他会执行我们的execvp函数。</p><p>但是这就引出了新的问题。 当我们得到两个进程以后，这两个进程会并行的执行，如果你执行的程序耗时过久，你会发现在执行子进程的时候，主进程的提示打印符也会出现在屏幕中，并提示你输入下一条命令，这显然不是我们想要的。</p><p>为了解决这个问题，我们需要用的wait函数。 当进程调用wait函数以后，进程会立即阻塞自己并且自动分析是否当前进程的某个子进程已经退出，如果让他找到了这样一个变成僵尸的子进程，wait会收集这个进程的信息，并且把它彻底摧毁后返回，如果没有找到这样一个子进程，wait就会一直阻塞在这里，直到有一个这样的出现。</p><p>为了使用wait函数，首先我们需要知道进程是子进程还是父进程，这一点可以通过fork函数的返回值来判断。</p><h2 id="第二个Shell-Demo"><a href="#第二个Shell-Demo" class="headerlink" title="第二个Shell Demo"></a>第二个Shell Demo</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>    <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>    <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>    <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> **prompting shell version 2</span></span><br><span class="line"><span class="comment"> **</span></span><br><span class="line"><span class="comment"> **Solves the `one-shot' problem of version 1</span></span><br><span class="line"><span class="comment"> **Uses execvp(), but fork()s first so that the</span></span><br><span class="line"><span class="comment"> **shell waits around to perform another command</span></span><br><span class="line"><span class="comment"> **New problem: shell catches signals.  Run vi, press ^c.</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>MAXARGS20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ARGLEN100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>CMDPROMPT<span class="meta-string">"Command please: "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ARGPROMPT<span class="meta-string">"next argument please: "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>prompt(n)printf(<span class="meta-string">"%s"</span>, (n)==0 ? CMDPROMPT : ARGPROMPT );</span></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span>*arglist[MAXARGS+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span>numargs;</span><br><span class="line"><span class="keyword">char</span>argbuf[ARGLEN];</span><br><span class="line"><span class="function"><span class="keyword">char</span>*<span class="title">makestring</span><span class="params">()</span></span>;</span><br><span class="line">numargs = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( numargs &lt; MAXARGS )</span><br><span class="line">&#123;</span><br><span class="line">prompt( numargs );</span><br><span class="line"><span class="keyword">if</span> ( gets(argbuf) &amp;&amp; *argbuf ) &#123;</span><br><span class="line">arglist[numargs++] = makestring(argbuf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( numargs == <span class="number">0</span> )</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">arglist[numargs] = <span class="literal">NULL</span> ;</span><br><span class="line">execute( arglist );</span><br><span class="line">numargs = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">execute( <span class="keyword">char</span> *arglist[] )</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *use fork and execvp and wait to do it</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span>pid,exitstatus;</span><br><span class="line"></span><br><span class="line">pid = fork();<span class="comment">/* make new process */</span></span><br><span class="line"><span class="keyword">switch</span>( pid )&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">perror(<span class="string">"fork failed"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">execvp(arglist[<span class="number">0</span>], arglist);</span><br><span class="line">perror(<span class="string">"execvp failed"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">while</span>( wait(&amp;exitstatus) != pid )</span><br><span class="line">;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"child exited with status %d,%d\n"</span>,</span><br><span class="line">exitstatus&gt;&gt;<span class="number">8</span>, exitstatus&amp;<span class="number">0377</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *</span><br><span class="line">makestring( <span class="keyword">char</span> *buf )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span>*cp;</span><br><span class="line"><span class="keyword">if</span> ( cp = <span class="built_in">malloc</span>( <span class="built_in">strlen</span>(buf) + <span class="number">1</span> ) )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(cp, buf);</span><br><span class="line"><span class="keyword">return</span> cp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"out of memory\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到了这里，我们的shell demo已经可以基本的运行命令并且正常运行了，但是我们会发现一个新的问题，那么就是现在退出demo的唯一方法就是按ctrl-c键，那么如果在等待子进程结束时输入ctrl-c键会如何呢？</p><p>我们会发现子进程结束，但是shell也技术了，ctrl-c生成的SIGINT信号不但杀死了运行的子进程，而且也杀死了运行shell的进程，这是为什么？</p><h4 id="键盘信号发给所有连接的进程"><a href="#键盘信号发给所有连接的进程" class="headerlink" title="键盘信号发给所有连接的进程"></a>键盘信号发给所有连接的进程</h4><p>程序shell和tr都连接到终端，当按下中断键以后，ttr驱动会告诉内核向所有由这个终端控制的进程发送SIGINT信号，子进程死了，shell也死了，即使他还在等待子进程的结束。</p><p>那么如何才能让shell不被用户按下的中断或退出键杀死呢？ 我将留到这一主题的中篇</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1488645051996&amp;amp;di=f8cf376e2a064e93d603b6c80f6b7346&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fwww.xitongzhijia.net%2Fuploads%2Fallimg%2F150528%2F64-15052Q106123F.jpg&quot; alt=&quot;pic1&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这周操作系统的最后一个实验室写一个Shell，然而实验手册的pdf上只指明了你必须要完成什么函数，对于怎么写则是一点提示都没有。&lt;/p&gt;
&lt;p&gt;所以本篇文章则立意于如何写出一个简单可用的shell，个人认为这个主题应该会分为上中下三篇文章来阐明从零开始的Shell编写过程&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="http://Yisaer.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>并发下的搜索与排序</title>
    <link href="http://Yisaer.github.io/2017/02/15/ParaAri/"/>
    <id>http://Yisaer.github.io/2017/02/15/ParaAri/</id>
    <published>2017-02-15T10:13:42.000Z</published>
    <updated>2017-12-28T16:21:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h1><p>在传统的串行运行下，在数组内查找特定元素和将数组排序都有一套成熟的方法。</p><p>对于数组内查找，如果是有序数组在可以在查找的话可以运用二分查找法，而对于无序数组则应该将数组遍历一遍。</p><p>而对于数组排序，则是有类似快排，归并排序等等复杂度控制在O(nlogn）的算法。 </p><p>从算法的角度来说，似乎并没有往下继续优化的空间了。但是如果运行在并行环境下，虽然理论上的算法复杂度并没有变小，但是我们可以用并行的方式来将时间缩短。</p><a id="more"></a><h2 id="为何可以使用并行"><a href="#为何可以使用并行" class="headerlink" title="为何可以使用并行"></a>为何可以使用并行</h2><p>考虑这么一件事情，如果我们将一堆苹果放在一个篮子里，那么我们唯一能做的做法就是将苹果一个个的依次放入篮子，这没什么好说的。那么如果我们要加快速度的话，我们会多派一个人手，比如将苹果堆一分为二，然后两个人分别将两堆苹果同时放到一个篮子里。但是如果我们考虑到我们希望放入苹果时，希望是一个红苹果一个青苹果间隔，那么在两个人毫无配合的情况下，这种方式反而不如一个人依次放入来的效果好。也就是说，运用并行的场景下，要求我们所处理的数据互相不干扰，那么你就可以使用并行来充分的利用起时间。</p><h2 id="数组并行搜索"><a href="#数组并行搜索" class="headerlink" title="数组并行搜索"></a>数组并行搜索</h2><p>对于一个数组，我们想在里面找到元素a的下标，在串行模式中我们只能运用遍历的方式来搜索指定元素。但是如果我们将数组一分为二，然后将分配两个线程并行的单独搜索，那么CPU也就被更多的利用了。</p><p>以Java为例子，首先我们准备好线程池，并发数，原子性的Int与数组</p><pre><code>static ExecutorService pool = Executors.newCachedThreadPool();static final int Thread_Num = 2;static AtomicInteger res = new AtomicInteger(-1);static int[] arr;</code></pre><p><strong>然后我们在再编写每个线程所应该执行的搜索函数，规定了搜索值与搜索区间</strong></p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> searchValue,<span class="keyword">int</span> beginPos,<span class="keyword">int</span> endPos)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = beginPos;i&lt;endPos;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(res.get()&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] == searchValue)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Found"</span>);</span><br><span class="line">            <span class="keyword">if</span>( !res.compareAndSet(-<span class="number">1</span>,i))&#123;</span><br><span class="line">                <span class="keyword">return</span> res.get();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p><strong>然后我们创建每个线程完成的任务，以Future模式声明，实现了Callable接口</strong></p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> begin,end,searchValue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchTask</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> searchValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.begin = begin;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">        <span class="keyword">this</span>.searchValue = searchValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> re = search(searchValue,begin,end);</span><br><span class="line">        <span class="keyword">return</span> re;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>最好我们将搜索封装成一个函数即可，当中由于一个数组被切割成N份来并行搜索，我们可以用Arraylist来包装每个线程，从而遍历每个线程是否得到结果。</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">pSearch</span><span class="params">(<span class="keyword">int</span> searchValue)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> subArrSize = arr.length/Thread_Num+<span class="number">1</span>;</span><br><span class="line">    List&lt;Future&lt;Integer&gt;&gt; re = <span class="keyword">new</span> ArrayList&lt;Future&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> end = i +subArrSize;</span><br><span class="line">        <span class="keyword">if</span>(end&gt;=arr.length)&#123;</span><br><span class="line">            end = arr.length;</span><br><span class="line">        &#125;</span><br><span class="line">        re.add(pool.submit(<span class="keyword">new</span> SearchTask(i,end,searchValue)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Future&lt;Integer&gt; fu : re) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fu.get() &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> fu.get();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>许多串行情境下的算法，只要当中数据不相互影响，大部分都可以用并发的情境来充分利用CPU，下次我会分析下如何使用并发来数组排序</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概论&quot;&gt;&lt;a href=&quot;#概论&quot; class=&quot;headerlink&quot; title=&quot;概论&quot;&gt;&lt;/a&gt;概论&lt;/h1&gt;&lt;p&gt;在传统的串行运行下，在数组内查找特定元素和将数组排序都有一套成熟的方法。&lt;/p&gt;
&lt;p&gt;对于数组内查找，如果是有序数组在可以在查找的话可以运用二分查找法，而对于无序数组则应该将数组遍历一遍。&lt;/p&gt;
&lt;p&gt;而对于数组排序，则是有类似快排，归并排序等等复杂度控制在O(nlogn）的算法。 &lt;/p&gt;
&lt;p&gt;从算法的角度来说，似乎并没有往下继续优化的空间了。但是如果运行在并行环境下，虽然理论上的算法复杂度并没有变小，但是我们可以用并行的方式来将时间缩短。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="http://Yisaer.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>寒假的总结与新学期的计划</title>
    <link href="http://Yisaer.github.io/2017/02/13/winter/"/>
    <id>http://Yisaer.github.io/2017/02/13/winter/</id>
    <published>2017-02-13T13:53:56.000Z</published>
    <updated>2017-12-28T16:23:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1487007153511&amp;di=9650dc810ab9e556c95734e2aa3ad8de&amp;imgtype=0&amp;src=http%3A%2F%2Fsc.jb51.net%2Fuploads%2Fallimg%2F150716%2F14-150G6091F63L.jpg" alt="pic1"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>寒假结束了，感觉这个寒假又像之前的假期一样，没有完全利用起来呀。 诶这也是没办法。总结一下这个寒假所做的事情并想一下接下来的安排吧。</p><a id="more"></a><h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><p>这个寒假首先做的事情应该就是接触异步编程，学习使用了Netty框架，并用Netty框架写了一个服务端用在了爬虫作业中。 看了一遍O’Reilly的JavaNio,现在想想感觉自己对选择器和信道还是感觉懵懵懂懂的。虽然写过一遍Demo，不过这个东西就像当初刚接触JDBC一样，希望自己以后能对异步编程的理解越来越深吧。</p><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><p>大二的时候一直希望能学会写爬虫。这个寒假学了python的requests库与bs4库以后，写了两个爬虫来练手。一个是自己用于爬取OJ题目代码的爬虫，一个是爬取豆瓣上书的信息的爬虫。豆瓣爬虫也结合了线程池的技术来加快速度。 虽然感觉在爬虫上这不算什么，但是这种从不会到会的感觉还是很棒的。</p><h1 id="Unix编程"><a href="#Unix编程" class="headerlink" title="Unix编程"></a>Unix编程</h1><p>这个寒假大部分的时候应该都放在了Unix编程上面。用C语言来调用系统函数来完成一个个功能非常有意思，而且也对于理解Unix类的操作系统有着非常大的帮助。虽然这本书在寒假大致已经看完了，但是感觉只看了一遍以后并没有完全吸收，而且我觉得这本书真的值得再去学习一遍，将代码再去完成一遍。之前有很多命令函数完成的比较囫囵吞枣，感觉这个学期还要抽时间一天来学习一章的速度重温一遍。以后想去刷apue与unp，希望自己有一天能发展成系统、网络的工程师。话说还一直赖着HTTPD的实现没有写，准备抽空用C语言将HTTP服务器实现。</p><h1 id="Java高并发程序设计"><a href="#Java高并发程序设计" class="headerlink" title="Java高并发程序设计"></a>Java高并发程序设计</h1><p>一本国人写的非常棒的书，个人觉得比Java并发实战那本书写的更加直白易懂。这本书大概是在寒假的最后一礼拜开始看的，今天连看带写Demo的完成了前四章吧。总的来说是熟悉了大部分概念与JDK里面的Concurrent并发包。 虽然这是以JAVA对语言的多线程教材，但是感觉提出并解决了许多在并发状况下会出现的错误与如何解决。</p><h1 id="Loic"><a href="#Loic" class="headerlink" title="Loic"></a>Loic</h1><p>为了给计算思维交差写的一个Syn泛洪攻击，类似于一个加农炮，服务端从操作大量客户端来向某一台主机发起Syn泛洪攻击。 感觉安全这方面还是很有趣的，我也只是试着写了一个工具测试。 不过如果以后接触安全的话我想我会去了解Web安全吧，毕竟在Web方面有点了解。</p><h1 id="计划安排"><a href="#计划安排" class="headerlink" title="计划安排"></a>计划安排</h1><p>接下来会去先将设计模式了解一下以后再将Java高并发刷完，当中会去熟悉学习springboot与mybatis框架，准备为下一次实习做起准备。如果能抽得出时间会二刷Unix系统编程。这应该就是短期内打算在冬季学期内完成的目标了吧。 长期的打算以后再看吧， 感觉自己有很多事情要去做就等以后再说吧。</p><p>然后每天的锻炼也要坚持不能停，尽快将生物钟恢复到在学校的早睡早起吧。当然Github的活跃更新也不能断. 嗯就这样吧先..</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1487007153511&amp;amp;di=9650dc810ab9e556c95734e2aa3ad8de&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fsc.jb51.net%2Fuploads%2Fallimg%2F150716%2F14-150G6091F63L.jpg&quot; alt=&quot;pic1&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;寒假结束了，感觉这个寒假又像之前的假期一样，没有完全利用起来呀。 诶这也是没办法。总结一下这个寒假所做的事情并想一下接下来的安排吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://Yisaer.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>关于HaspMap在并发下产生的无限循环的探讨</title>
    <link href="http://Yisaer.github.io/2017/02/06/Inf-Loop-on-HashMap/"/>
    <id>http://Yisaer.github.io/2017/02/06/Inf-Loop-on-HashMap/</id>
    <published>2017-02-05T16:05:47.000Z</published>
    <updated>2017-02-05T16:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>从前我们的Java代码因为一些原因使用了HashMap这个东西，但是当时的程序是单线程的，一切都没有问题。后来，我们的程序性能有问题，所以需要变成多线程的，于是，变成多线程后到了线上，发现程序经常占了100%的CPU，查看堆栈，你会发现程序都Hang在了HashMap.get()这个方法上了，重启程序后问题消失。但是过段时间又会来。而且，这个问题在测试环境里可能很难重现</p><p>我们简单的看一下我们自己的代码，我们就知道HashMap被多个线程操作。而Java的文档说HashMap是非线程安全的，应该用ConcurrentHashMap。</p><p>但是在这里我们可以来研究一下原因。</p><a id="more"></a><h1 id="Hash表数据结构"><a href="#Hash表数据结构" class="headerlink" title="Hash表数据结构"></a>Hash表数据结构</h1><p>HashMap通常会用一个指针数组（假设为table[]）来做分散所有的key，当一个key被加入时，会通过Hash算法通过key算出这个数组的下标i，然后就把这个<key, value="">插到table[i]中，如果有两个不同的key被算在了同一个i，那么就叫冲突，又叫碰撞，这样会在table[i]上形成一个链表。</key,></p><p>我们知道，如果table[]的尺寸很小，比如只有2个，如果要放进10个keys的话，那么碰撞非常频繁，于是一个O(1)的查找算法，就变成了链表遍历，性能变成了O(n)，这是Hash表的缺陷。</p><p>所以，Hash表的尺寸和容量非常的重要。一般来说，Hash表这个容器当有数据要插入时，都会检查容量有没有超过设定的thredhold，如果超过，需要增大Hash表的尺寸，但是这样一来，整个Hash表里的无素都需要被重算一遍。这叫rehash，这个成本相当的大。</p><h1 id="Hash表源代码"><a href="#Hash表源代码" class="headerlink" title="Hash表源代码"></a>Hash表源代码</h1><p>下面，我们来看一下Java的HashMap的源代码。</p><p>Put一个Key,Value对到Hash表中：</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//算Hash值</span></span><br><span class="line">    <span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="comment">//如果该key已被插入，则替换掉旧的value （链接操作）</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//该key不存在，需要增加一个结点</span></span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p><strong>检查容量是否超标</strong></p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">    <span class="comment">//查看当前的size是否超过了我们设定的阈值threshold，如果超过，需要resize</span></span><br><span class="line">    <span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p><strong>新建一个更大尺寸的hash表，然后把数据从老的Hash表中迁移到新的Hash表中。</strong></p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    Entry[] oldTable = table;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//创建一个新的Hash Table</span></span><br><span class="line">    Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">    <span class="comment">//将Old Hash Table上的数据迁移到New Hash Table上</span></span><br><span class="line">    transfer(newTable);</span><br><span class="line">    table = newTable;</span><br><span class="line">    threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p><strong>迁移的源代码</strong></p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Entry[] src = table;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">    <span class="comment">//下面这段代码的意思是：</span></span><br><span class="line">    <span class="comment">//  从OldTable里摘一个元素出来，然后放到NewTable中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123;</span><br><span class="line">        Entry&lt;K,V&gt; e = src[j];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            src[j] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">                e.next = newTable[i];</span><br><span class="line">                newTable[i] = e;</span><br><span class="line">                e = next;</span><br><span class="line">            &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="正常的ReHash的过程"><a href="#正常的ReHash的过程" class="headerlink" title="正常的ReHash的过程"></a>正常的ReHash的过程</h1><ul><li>我假设了我们的hash算法就是简单的用key mod 一下表的大小（也就是数组的长度）。</li><li>最上面的是old hash 表，其中的Hash表的size=2, 所以key = 3, 7, 5，在mod 2以后都冲突在table[1]这里了。</li><li>接下来的三个步骤是Hash表 resize成4，然后所有的<key,value> 重新rehash的过程</key,value></li></ul><p><img src="http://coolshell.cn//wp-content/uploads/2013/05/HashMap01.jpg" alt="pic1"></p><h1 id="并发下的Rehash"><a href="#并发下的Rehash" class="headerlink" title="并发下的Rehash"></a>并发下的Rehash</h1><h3 id="假设我们有两个线程。用红色和浅蓝色标注了一下。"><a href="#假设我们有两个线程。用红色和浅蓝色标注了一下。" class="headerlink" title="假设我们有两个线程。用红色和浅蓝色标注了一下。"></a>假设我们有两个线程。用红色和浅蓝色标注了一下。</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    Entry&lt;K,V&gt; next = e.next; <span class="comment">// &lt;--假设线程一执行到这里就被调度挂起了</span></span><br><span class="line">    <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">    e.next = newTable[i];</span><br><span class="line">    newTable[i] = e;</span><br><span class="line">    e = next;</span><br><span class="line">&#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure></code></pre><p><img src="http://coolshell.cn//wp-content/uploads/2013/05/HashMap02.jpg" alt="pic2"></p><h3 id="线程一被调度回来执行。"><a href="#线程一被调度回来执行。" class="headerlink" title="线程一被调度回来执行。"></a>线程一被调度回来执行。</h3><p>先是执行 newTalbe[i] = e;</p><p>然后是e = next，导致了e指向了key(7)，</p><p>而下一次循环的next = e.next导致了next指向了key(3)</p><p><img src="http://coolshell.cn//wp-content/uploads/2013/05/HashMap03.jpg" alt="pic3"></p><p><strong>线程一接着工作。把key(7)摘下来，放到newTable[i]的第一个，然后把e和next往下移</strong></p><p><img src="http://coolshell.cn//wp-content/uploads/2013/05/HashMap04.jpg" alt="pic4"></p><p>e.next = newTable[i] 导致  key(3).next 指向了 key(7)</p><p>注意：此时的key(7).next 已经指向了key(3)， 环形链表就这样出现了。</p><p><img src="http://coolshell.cn//wp-content/uploads/2013/05/HashMap05.jpg" alt="pic5"></p><p>于是，当我们的线程一调用到，HashTable.get(11)时，悲剧就出现了——Infinite Loop。</p><h1 id="如何避免这个问题"><a href="#如何避免这个问题" class="headerlink" title="如何避免这个问题"></a>如何避免这个问题</h1><p><strong>HashMap本来就不支持并发。要并发就用ConcurrentHashmap</strong>        </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;从前我们的Java代码因为一些原因使用了HashMap这个东西，但是当时的程序是单线程的，一切都没有问题。后来，我们的程序性能有问题，所以需要变成多线程的，于是，变成多线程后到了线上，发现程序经常占了100%的CPU，查看堆栈，你会发现程序都Hang在了HashMap.get()这个方法上了，重启程序后问题消失。但是过段时间又会来。而且，这个问题在测试环境里可能很难重现&lt;/p&gt;
&lt;p&gt;我们简单的看一下我们自己的代码，我们就知道HashMap被多个线程操作。而Java的文档说HashMap是非线程安全的，应该用ConcurrentHashMap。&lt;/p&gt;
&lt;p&gt;但是在这里我们可以来研究一下原因。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://Yisaer.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>WireShark Lab About Http</title>
    <link href="http://Yisaer.github.io/2016/12/12/WireSharkLabHttp/"/>
    <id>http://Yisaer.github.io/2016/12/12/WireSharkLabHttp/</id>
    <published>2016-12-12T12:03:51.000Z</published>
    <updated>2017-12-28T16:23:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-The-Basic-HTTP-GET-response-interaction"><a href="#1-The-Basic-HTTP-GET-response-interaction" class="headerlink" title="1. The Basic HTTP GET/response interaction"></a>1. The Basic HTTP GET/response interaction</h2><ol><li><p>Start up your web browser.</p></li><li><p>Start up the Wireshark packet sniffer, as described in the Introductory lab (but<br>don’t yet begin packet capture). Enter “http” (just the letters, not the quotation marks) in the display-filter-specification window, so that only captured HTTP messages will be displayed later in the packet-listing window. (We’re only interested in the HTTP protocol here, and don’t want to see the clutter of all captured packets).</p></li><li><p>Wait a bit more than one minute (we’ll see why shortly), and then begin Wireshark packet capture.</p></li><li><p>Enter the following to your browser</p></li></ol><pre><code>http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file1.html</code></pre><p>Your browser should display the very simple, one-line HTML file.</p><ol><li>Stop Wireshark packet capture.</li></ol><a id="more"></a><h2 id="The-WireShark-Capturing-Result"><a href="#The-WireShark-Capturing-Result" class="headerlink" title="The WireShark Capturing Result"></a>The WireShark Capturing Result</h2><p><img src="http://p1.bpimg.com/567571/9ce6c9858a9e1b74.png" alt=""></p><h2 id="Problem-and-My-Answer"><a href="#Problem-and-My-Answer" class="headerlink" title="Problem and My Answer"></a>Problem and My Answer</h2><h3 id="1-Is-your-browser-running-HTTP-version-1-0-or-1-1-What-version-of-HTTP-is-the-server-running"><a href="#1-Is-your-browser-running-HTTP-version-1-0-or-1-1-What-version-of-HTTP-is-the-server-running" class="headerlink" title="1. Is your browser running HTTP version 1.0 or 1.1? What version of HTTP is the server running?"></a>1. Is your browser running HTTP version 1.0 or 1.1? What version of HTTP is the server running?</h3><p>My browser run HTTP 1.1 and the server does too.</p><h3 id="2-What-languages-if-any-does-your-browser-indicate-that-it-can-accept-to-the-server"><a href="#2-What-languages-if-any-does-your-browser-indicate-that-it-can-accept-to-the-server" class="headerlink" title="2. What languages (if any) does your browser indicate that it can accept to the server?"></a>2. What languages (if any) does your browser indicate that it can accept to the server?</h3><p>zh-cn,zh;q=0.8</p><h3 id="3-What-is-the-IP-address-of-your-computer-Of-the-gaia-cs-umass-edu-server"><a href="#3-What-is-the-IP-address-of-your-computer-Of-the-gaia-cs-umass-edu-server" class="headerlink" title="3. What is the IP address of your computer? Of the gaia.cs.umass.edu server?"></a>3. What is the IP address of your computer? Of the gaia.cs.umass.edu server?</h3><p>My IP address is 10.95.64.155 and the Server IP address is 128.119.245.12</p><h3 id="4-What-is-the-status-code-returned-from-the-server-to-your-browser"><a href="#4-What-is-the-status-code-returned-from-the-server-to-your-browser" class="headerlink" title="4. What is the status code returned from the server to your browser?"></a>4. What is the status code returned from the server to your browser?</h3><p>200 OK</p><p>###5. When was the HTML file that you are retrieving last modified at the server?</p><p>Last-Modified: Mon, 11 Jan 2010 01:59:52 GMT\r\n</p><h3 id="6-How-many-bytes-of-content-are-being-returned-to-your-browser"><a href="#6-How-many-bytes-of-content-are-being-returned-to-your-browser" class="headerlink" title="6. How many bytes of content are being returned to your browser?"></a>6. How many bytes of content are being returned to your browser?</h3><p>349</p><h3 id="7-By-inspecting-the-raw-data-in-the-packet-content-window-do-you-see-any-headers-within-the-data-that-are-not-displayed-in-the-packet-listing-window-If-so-name-one"><a href="#7-By-inspecting-the-raw-data-in-the-packet-content-window-do-you-see-any-headers-within-the-data-that-are-not-displayed-in-the-packet-listing-window-If-so-name-one" class="headerlink" title="7. By inspecting the raw data in the packet content window, do you see any headers within the data that are not displayed in the packet-listing window? If so, name one."></a>7. By inspecting the raw data in the packet content window, do you see any headers within the data that are not displayed in the packet-listing window? If so, name one.</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-The-Basic-HTTP-GET-response-interaction&quot;&gt;&lt;a href=&quot;#1-The-Basic-HTTP-GET-response-interaction&quot; class=&quot;headerlink&quot; title=&quot;1. The Basic HTTP GET/response interaction&quot;&gt;&lt;/a&gt;1. The Basic HTTP GET/response interaction&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Start up your web browser.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start up the Wireshark packet sniffer, as described in the Introductory lab (but&lt;br&gt;don’t yet begin packet capture). Enter “http” (just the letters, not the quotation marks) in the display-filter-specification window, so that only captured HTTP messages will be displayed later in the packet-listing window. (We’re only interested in the HTTP protocol here, and don’t want to see the clutter of all captured packets).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wait a bit more than one minute (we’ll see why shortly), and then begin Wireshark packet capture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enter the following to your browser&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file1.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your browser should display the very simple, one-line HTML file.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stop Wireshark packet capture.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="http://Yisaer.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>关于在64位Linux系统上编译链接C和Assembly的注意点</title>
    <link href="http://Yisaer.github.io/2016/12/12/Assebmy-C-Compile-Link/"/>
    <id>http://Yisaer.github.io/2016/12/12/Assebmy-C-Compile-Link/</id>
    <published>2016-12-12T08:48:42.000Z</published>
    <updated>2017-12-28T16:19:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p>在AMD64架构下的机器，当我们使用nasm与C语言混合编程的时候，需要注意到的是nasm的默认编译产生的是32位目标代码。而gcc在64位的机器上则默认产生的是64位目标代码</p><blockquote><p>这么看来，机器位数并不是越高越好啊</p></blockquote><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>我们在64位机器上使用nasm编译汇编与C混合调用时候</p><pre><code>nasm -f elf foo.s -o foo.ogcc -c bar.c -o bar.old -s -o foobar bar.o foo.o</code></pre><p>此时出现错误为</p><pre><code>ld: i386 architecture of input file `foo.o&apos; is incompatible with i386:x86-64 output</code></pre><p>而原因则是因为在64位机器上的gcc编译为64位目标代码，而nasm则编译为是32位目标代码</p><p>所以在编译链接的时候我们应该改为</p><pre><code>nasm -f elf foo.s  -o  foo.ogcc  -m32  -c  bar.c  -o bar.old  -m elf_i386 -s -o foobar foo.o bar.o</code></pre><p>并且在构建32位目标代码时需索所依赖的包</p><p>包管理下载即可</p><pre><code>sudo apt-get install libc6-dev-i386</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概况&quot;&gt;&lt;a href=&quot;#概况&quot; class=&quot;headerlink&quot; title=&quot;概况&quot;&gt;&lt;/a&gt;概况&lt;/h2&gt;&lt;p&gt;在AMD64架构下的机器，当我们使用nasm与C语言混合编程的时候，需要注意到的是nasm的默认编译产生的是32位目标代码。而gcc在64位的机器上则默认产生的是64位目标代码&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这么看来，机器位数并不是越高越好啊&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="http://Yisaer.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>关于PMTest8中的切换分页详解</title>
    <link href="http://Yisaer.github.io/2016/12/07/Page2/"/>
    <id>http://Yisaer.github.io/2016/12/07/Page2/</id>
    <published>2016-12-07T14:45:58.000Z</published>
    <updated>2017-12-28T16:21:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><blockquote><p>当我面对着五百多行的汇编时, 我的内心几乎是崩溃的。</p><p>幸运的是，最终我还是明白了。</p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先要先感谢这两篇博客，给了我莫大的帮助。 汇编真的是一门非常有意思的语言，每次都以为自己学明白了，结果每每再看一次，却都会发现自己还是有地方不懂，根据问题再去搜索，思考一番，每每都有新的收获。</p><p><a href="http://www.cnblogs.com/wanghj-dz/archive/2011/05/09/2041332.html" target="_blank" rel="noopener">链接1</a></p><p><a href="http://www.cnblogs.com/wanghj-dz/archive/2011/05/09/2040952.html" target="_blank" rel="noopener">链接2</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>在pmtest8里，我们对分页机制进行了切换页目录的操作。简单的说，对于同一个线性地址，根据不同的页表会映射到不同的物理地址上。那么如果在内存空间中，不同的物理地址上存储了不同的程序，那么同一个线性地址的调用就会调用不同的函数。那么为了能达到这种效果，就是在两次分页机制启动时，加载了不同的页表即可。</p><p>所以PMTEST8的本质内容就是在32位保护模式下，启动2次分页机制，这2次分页机制中，cr3所指定的页表基址不同，但所调用的线性地址相同。在这两次的同一线性地址的调用中，调用了两个不同的函数。</p><p>在学习PMTEST8中，切换页表的操作让我感到十分困惑，这也暴露除了我汇编基础不扎实的弱点。</p><p>想要看懂PMTEST8，首先要搞明白这几个变量</p><pre><code>PageDirBase0        equ    200000h    ; 页目录开始地址:    2MPageTblBase0        equ    201000h    ; 页表开始地址:        2M +  4KPageDirBase1        equ    210000h    ; 页目录开始地址:    2M + 64KPageTblBase1        equ    211000h    ; 页表开始地址:        2M + 64K + 4K</code></pre><p>这些代表了两个PDE与PTE的所在地址。</p><pre><code>LinearAddrDemo    equ    00401000hProcFoo        equ    00401000hProcBar        equ    00501000hProcPagingDemo    equ    00301000h</code></pre><p>这四个变量显示了线性地址的值， 以及接下来三个变量都各自对应三个程序的物理地址。</p><p>接着，我们通过以下程序将相对应的程序写到上面所标出的物理地址中。那么在真实的物理地址内，程序就被写好了</p><pre><code>PagingDemo:mov    ax, csmov    ds, axmov    ax, SelectorFlatRWmov    es, axpush    LenFoopush    OffsetFoopush    ProcFoocall    MemCpyadd    esp, 12push    LenBarpush    OffsetBarpush    ProcBarcall    MemCpyadd    esp, 12push    LenPagingDemoAllpush    OffsetPagingDemoProcpush    ProcPagingDemocall    MemCpyadd    esp, 12</code></pre><h2 id="第一个分页机制启动"><a href="#第一个分页机制启动" class="headerlink" title="第一个分页机制启动"></a>第一个分页机制启动</h2><p>现在，我们根据MemSize的值来确定PDE的个数，然后初始化第一个页表</p><pre><code>; 启动分页机制 --------------------------------------------------------------SetupPaging:    ; 根据内存大小计算应初始化多少PDE以及多少页表    xor    edx, edx    mov    eax, [dwMemSize]    mov    ebx, 400000h    ; 400000h = 4M = 4096 * 1024, 一个页表对应的内存大小    div    ebx    mov    ecx, eax    ; 此时 ecx 为页表的个数，也即 PDE 应该的个数    test    edx, edx    jz    .no_remainder    inc    ecx        ; 如果余数不为 0 就需增加一个页表.no_remainder:    mov    [PageTableNumber], ecx    ; 暂存页表个数    ; 为简化处理, 所有线性地址对应相等的物理地址. 并且不考虑内存空洞.    ; 首先初始化页目录    mov    ax, SelectorFlatRW    mov    es, ax    mov    edi, PageDirBase0    ; 此段首地址为 PageDirBase0    xor    eax, eax    mov    eax, PageTblBase0 | PG_P  | PG_USU | PG_RWW.1:    stosd    add    eax, 4096        ; 为了简化, 所有页表在内存中是连续的.    loop    .1    ; 再初始化所有页表    mov    eax, [PageTableNumber]    ; 页表个数    mov    ebx, 1024        ; 每个页表 1024 个 PTE    mul    ebx    mov    ecx, eax        ; PTE个数 = 页表个数 * 1024    mov    edi, PageTblBase0    ; 此段首地址为 PageTblBase0    xor    eax, eax    mov    eax, PG_P  | PG_USU | PG_RWW.2:    stosd    add    eax, 4096        ; 每一页指向 4K 的空间    loop    .2    mov    eax, PageDirBase0    mov    cr3, eax    mov    eax, cr0    or    eax, 80000000h    mov    cr0, eax    jmp    short .3.3:    nop    ret</code></pre><p>其实上面这段程序不重要，我们首先要明白一个PTE表的PTE有4B这么大，有1024项，所以一个PTE表有4KB这么大。 现在我们来看线性地址与第一个页表的首地址</p><pre><code>PageDirBase0        equ    200000hLinearAddrDemo    equ    00401000h</code></pre><p>我们将线性地址拆成32位的二进制码，然后根据分页机制的可以得出结果为偏移一个PDE后再偏移一个PTE</p><p>在本例中，为了方便起见，依旧是采取线性地址=物理地址的映射方法。<br>也就是说我们第一个偏移PDE过后，物理页的起始地址为400000H，即4MB。</p><p>为何是4MB呢? 因为我们的映射方法是线性地址等于物理地址，而我们在PDE表中偏移了一个PDE，那么说明我们物理地址之前存在着一个PTE表所对应的物理页表们，一个物理页表有4KB，一个PTE表是1024项，那么总共的大小就是4MB。 然后回到主题，我们的PTE表也偏移了一个PTE，也就是说我们所需要的物理表距离400000H偏离了一个物理表的大小。</p><p> 一个物理表为4KB，所以我们得到的转换地址同样为401000H。即Foo方法所在的物理地址。</p><h2 id="切换页表"><a href="#切换页表" class="headerlink" title="切换页表"></a>切换页表</h2><p>现在我们来着重看切换页表的代码</p><pre><code>; 切换页表 ------------------------------------------------------------------PSwitch:    ; 初始化页目录    mov    ax, SelectorFlatRW    mov    es, ax    mov    edi, PageDirBase1    ; 此段首地址为 PageDirBase1    xor    eax, eax    mov    eax, PageTblBase1 | PG_P  | PG_USU | PG_RWW    mov    ecx, [PageTableNumber].1:    stosd    add    eax, 4096        ; 为了简化, 所有页表在内存中是连续的.    loop    .1    ; 再初始化所有页表    mov    eax, [PageTableNumber]    ; 页表个数    mov    ebx, 1024        ; 每个页表 1024 个 PTE    mul    ebx    mov    ecx, eax        ; PTE个数 = 页表个数 * 1024    mov    edi, PageTblBase1    ; 此段首地址为 PageTblBase1    xor    eax, eax    mov    eax, PG_P  | PG_USU | PG_RWW.2:    stosd    add    eax, 4096        ; 每一页指向 4K 的空间    loop    .2    ; 在此假设内存是大于 8M 的    mov    eax, LinearAddrDemo    shr    eax, 22    mov    ebx, 4096    mul    ebx    mov    ecx, eax    mov    eax, LinearAddrDemo    shr    eax, 12    and    eax, 03FFh    ; 1111111111b (10 bits)    mov    ebx, 4    mul    ebx    add    eax, ecx    add    eax, PageTblBase1    mov    dword [es:eax], ProcBar | PG_P | PG_USU | PG_RWW    mov    eax, PageDirBase1    mov    cr3, eax    jmp    short .3.3:    nop    ret; ---------------------------------------------------------------------------</code></pre><p>这段代码可以大体上理解为初始化第二个页表，同样这里也是线性地址=物理地址的映射。</p><p>唯一不同的是在处理完初始化页表的内容后，他将本应该指向00401000H的地址内的值改成了另外一个物理地址。</p><p>怎么理解呢？</p><p>假设我们第二个页表的初始化后不去修改，那么如果我们现在依旧通过00401000这个线性地址来获得物理地址，那么首先是从页表基址来偏移一个PDE和PTE，因为偏移了一个PDE，所以我们页表的起始地址就是从211000加了4KB变成了212000.然后再偏移一个PTE，所以就再加了4B变成了212004H。 也就是说，对于第二个页表的来说，他所偏移一个PTE和一个PDE在他所在段的偏移地址最终计算得到是212004H。</p><pre><code>mov    eax, LinearAddrDemoshr    eax, 22mov    ebx, 4096mul    ebxmov    ecx, eaxmov    eax, LinearAddrDemoshr    eax, 12and    eax, 03FFh    ; 1111111111b (10 bits)mov    ebx, 4mul    ebxadd    eax, ecxadd    eax, PageTblBase1</code></pre><p>所以这段代码的本质就是将eax的值变成212004</p><p>然后再将通过</p><pre><code>mov    dword [es:eax], ProcBar | PG_P | PG_USU | PG_RWW</code></pre><p>这句代码修改了[es:eax]处内的值，使得原来的物理地址00401000变成了00501000.</p><p>那么我们在第二次分页机制启动后，我们再一次通过线性地址调用程序，就从原来的</p><pre><code>f(线性地址 : 00401000 ) = 物理地址: 00401000</code></pre><p>变成了</p><pre><code>f(线性地址 : 00401000 ) = 物理地址: 00501000</code></pre><p>所以自然就达到了通过同样的线性地址，却访问到了不同物理地址的效果，使得应用层只需要将线性地址提供给操作系统后，这种分页机制使得应用层屏蔽了物理层的物理地址。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概论&quot;&gt;&lt;a href=&quot;#概论&quot; class=&quot;headerlink&quot; title=&quot;概论&quot;&gt;&lt;/a&gt;概论&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;当我面对着五百多行的汇编时, 我的内心几乎是崩溃的。&lt;/p&gt;
&lt;p&gt;幸运的是，最终我还是明白了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="http://Yisaer.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>分页机制初探</title>
    <link href="http://Yisaer.github.io/2016/12/06/Page1/"/>
    <id>http://Yisaer.github.io/2016/12/06/Page1/</id>
    <published>2016-12-06T15:03:48.000Z</published>
    <updated>2017-12-28T16:21:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>好不容易搞明白了保护模式下的操作，兴致勃勃的进入分页机制这一章节，正好最近操作系统的课程上面也讲到了分页机制的内容。在操作系统上看了一遍原理，与真正用汇编实现与启动分页机制，这当中百种滋味，难以言表。</p><blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><a id="more"></a><h2 id="一些前言"><a href="#一些前言" class="headerlink" title="一些前言"></a>一些前言</h2><p>在80386当中，寄存器的位数为32位， 也就说明了寻址空间已经大到4GB，在32位保护模式下，通过分段模式+偏移地址的方式，我们写的程序中的逻辑地址通过分段机制直接转换为逻辑地址。 然而在虚拟化，或者进程进出的技术的需要，分页技术需要人们将一块内存空间作为一个单元使用，即”页”。在80386内，页的大小是被固定为4KB。</p><p>首先重点1) 页的大小为4KB ，即12位。</p><h2 id="分页机制"><a href="#分页机制" class="headerlink" title="分页机制"></a>分页机制</h2><p>在分页机制里面，我们汇编程序内的逻辑地址，通过分段机制转换为线性地址，然后这32位的线性地址再通过分页机制，转换为真正的物理地址。</p><p>简单的表示为:</p><pre><code>            分段机制                        分页机制逻辑地址 --------------&gt;  线性地址  -----------------&gt;  物理地址</code></pre><p>那么什么是分页机制？</p><p>分页机制的实质其实就是一个<strong>两级索引表</strong>。</p><h2 id="第一级表-PDE表"><a href="#第一级表-PDE表" class="headerlink" title="第一级表 PDE表"></a>第一级表 PDE表</h2><p>PDE即 Page Direct Entry. 一个PDE是4B，PDE表即一组连续的PDE。PDE表最多有1024个PDE。每一个PDE的其中20位指向了一个<strong>PTE表</strong></p><h2 id="第二级表"><a href="#第二级表" class="headerlink" title="第二级表"></a>第二级表</h2><p>PTE 即 Page Table Entry. PTE同样也是4B大小，PTE表中有1024个PTE。每个PTE的20位作为每个<strong>物理页</strong>的基址。</p><h2 id="从线性地址到物理地址"><a href="#从线性地址到物理地址" class="headerlink" title="从线性地址到物理地址"></a>从线性地址到物理地址</h2><p>从上面看出，某个物理页表，是通过PTE表中的某个PTE所指向的，那么要得到一个完整的物理地址，就还缺少偏移地址。而PTE表呢，又是由某个PDE所指向的。<br>所以我们要将线性地址转换为物理地址，首先要得到PDE表的偏移地址1，得到一个PDE表。再用一个偏移地址2确定某个PTE表中的PTE，再从这个PTE得到物理页表，最后再用偏移地址3和物理页表确定真正的物理地址。</p><p>而我们的cr3寄存器就是用来存放偏移地址1，偏移地址2，偏移地址3的。<br>首先，PDE表中最多有1024个PDE，所以我们的偏移地址1有10位，PTE表中最多有1024个PTE，所以偏移地址2有10位，然后我们最终的物理页表有12位，所以偏移地址3需要12位，<br>三个偏移地址的长度加起来正好32位，依次从低到高的存放在了cr3寄存器中。</p><p>整个过程用图表示为:</p><p><img src="http://p1.bpimg.com/567571/ed2a41b3563a3db3.png" alt=""></p><p>那么现在假设我们有了线性地址，那么我们只要知道页表的地址，然后将PDE表和PTE表设置完成后即可。</p><p>所以在IA32中，我们将PDE的基地址存放在cr0寄存器的高20位中，(可以想一想为何是20位）<br>，然后在设置完PDE表和PTE表后，将cr0的最高位即PG位置1，即分页机制生效</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>在这里我们用关键代码， 实现f(线性地址) = 物理地址 = 线性地址的例子</p><pre><code>...PageDirBase        equ    200000h    ; 页目录开始地址: 2MPageTblBase        equ    201000h    ; 页表开始地址: 2M+4K ...LABEL_DESC_PAGE_DIR: Descriptor PageDirBase, 4095, DA_DRW;Page DirectoryLABEL_DESC_PAGE_TBL: Descriptor PageTblBase, 1023, DA_DRW|DA_LIMIT_4K;Page Tables...; 启动分页机制 --------------------------------------------------------------SetupPaging:    ; 为简化处理, 所有线性地址对应相等的物理地址.    ; 首先初始化页目录    mov    ax, SelectorPageDir    ; 此段首地址为 PageDirBase    mov    es, ax    mov    ecx, 1024        ; 共 1K 个表项    xor    edi, edi    xor    eax, eax    mov    eax, PageTblBase | PG_P  | PG_USU | PG_RWW.1:    stosd    add    eax, 4096        ; 为了简化, 所有页表在内存中是连续的.    loop    .1    ; 再初始化所有页表 (1K 个, 4M 内存空间)    mov    ax, SelectorPageTbl    ; 此段首地址为 PageTblBase    mov    es, ax    mov    ecx, 1024 * 1024    ; 共 1M 个页表项, 也即有 1M 个页    xor    edi, edi    xor    eax, eax    mov    eax, PG_P  | PG_USU | PG_RWW.2:    stosd    add    eax, 4096        ; 每一页指向 4K 的空间    loop    .2    mov    eax, PageDirBase    mov    cr3, eax    mov    eax, cr0    or    eax, 80000000h    mov    cr0, eax    jmp    short .3.3:    nop    ret; 分页机制启动完毕 ----------------------------------------------------------</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以看到，我们在代码中用了4kb+4MB的代价来寻址4GB的空间，然而在早期的内存中也许是只有几MB的，那么为了合理有效的利用分页机制，我们必须根据内存的可用空间来设置我们的PDE表和PTE表，这也是我接下来要学习的内容</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;好不容易搞明白了保护模式下的操作，兴致勃勃的进入分页机制这一章节，正好最近操作系统的课程上面也讲到了分页机制的内容。在操作系统上看了一遍原理，与真正用汇编实现与启动分页机制，这当中百种滋味，难以言表。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="http://Yisaer.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验(1)的总结</title>
    <link href="http://Yisaer.github.io/2016/11/29/OSEX1/"/>
    <id>http://Yisaer.github.io/2016/11/29/OSEX1/</id>
    <published>2016-11-29T09:33:51.000Z</published>
    <updated>2017-12-28T16:21:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><p>今天操作系统实验一的实验是对进程调度的模拟，本身没什么太大的边数。 久违的用了C++通过面向对象的方式实现了时间片轮转和优先级最高的模拟。</p><p>很久没有用C++写过面向对象的内容了，并且还涉及到了链表和指针的操作。</p><p>感觉自己的写法非常Java化，在涉及到指针的操作上，debug用了很久。诶</p><a id="more"></a><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意:"></a>题目大意:</h2><p><img src="http://p1.bqimg.com/567571/790cc6d8ec6e4058.png" alt=""><br><img src="http://p1.bqimg.com/567571/f76d5f5d49e64214.png" alt=""><br><img src="http://p1.bqimg.com/567571/31b8641f3c038661.png" alt=""></p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路:"></a>设计思路:</h2><p>总体分为了PCB类，链表类，以及进程调度的启动类。</p><p>但感觉在工具类与具体的Action之间，并没很好的解耦</p><h3 id="实体对象PCB类"><a href="#实体对象PCB类" class="headerlink" title="实体对象PCB类"></a>实体对象PCB类</h3><p>感觉自己就像在写JavaBean :) ,如果是用Java写的话估计会很快写完。</p><pre><code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Yisa on 2016/11/29.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> OSEX1_PROCESSCONTROBLOCK_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OSEX1_PROCESSCONTROBLOCK_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">static</span> State_Waiting = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">static</span> State_Running = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">static</span> State_Finish = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProcessControlBlock</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">static</span> CurrentProcessCount ;</span><br><span class="line">    <span class="keyword">int</span> ProcessIndex;</span><br><span class="line">    ProcessControlBlock* ptr;</span><br><span class="line">    <span class="keyword">int</span> PriorityNum;</span><br><span class="line">    <span class="keyword">int</span> CurrentTime;</span><br><span class="line">    <span class="keyword">int</span> State;</span><br><span class="line">    <span class="keyword">int</span> Alltime;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ProcessControlBlock()&#123;</span><br><span class="line">        ProcessIndex = ++CurrentProcessCount;</span><br><span class="line">        ptr = <span class="literal">NULL</span>;</span><br><span class="line">        PriorityNum =  rand()%<span class="number">5</span>+<span class="number">1</span>;</span><br><span class="line">        CurrentTime = <span class="number">0</span>;</span><br><span class="line">        State = State_Waiting;</span><br><span class="line">        Alltime = PriorityNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAllTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Alltime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getProcessIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ProcessIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ProcessControlBlock* <span class="title">getPtr</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPriorityNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PriorityNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCurrentTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CurrentTime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getState</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> State;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPtr</span><span class="params">(ProcessControlBlock* ptr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ptr = ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCurrentTime</span><span class="params">(<span class="keyword">int</span> currentTime)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;CurrentTime = currentTime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> State)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;State = State;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPriorityNum</span><span class="params">(<span class="keyword">int</span> PriorityNum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;PriorityNum = PriorityNum;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> ProcessControlBlock::CurrentProcessCount= <span class="number">0</span> ;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//OSEX1_PROCESSCONTROBLOCK_H</span></span></span><br></pre></td></tr></table></figure></code></pre><h3 id="提供工具的链表类"><a href="#提供工具的链表类" class="headerlink" title="提供工具的链表类"></a>提供工具的链表类</h3><p>这一块是我花了最久的时间也是最长的时间.. 其实在写程序之前我仔细思考了一下如何设计对象关系。事实上我觉得虽然是以实体-工具-然后实例启动的方法写出来了，但是感觉各个模块与各个模块之间耦合性较高。 事实上链表作为工具类只需要提供插入，删除，与遍历的操作即可。现在写完回头看看，我可能并不应该将轮转和优先级的做法耦合在工具类中，而是独立出来放在启动类里面。</p><pre><code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Yisa on 2016/11/29.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> OSEX1_PROCESSLIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OSEX1_PROCESSLIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ProcessControBlock.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">static</span> Algo_RoundRobin = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">static</span> Algo_Priority = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> ID;</span><br><span class="line">    <span class="keyword">int</span> PRIORITY;</span><br><span class="line">    <span class="keyword">int</span> CURTIME;</span><br><span class="line">    <span class="keyword">int</span> ALLTIME;</span><br><span class="line">    <span class="keyword">int</span> STATE;</span><br><span class="line">    <span class="keyword">int</span> NEXT;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(X a, X b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.ID&lt;b.ID;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProcessList</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ProcessControlBlock* head;</span><br><span class="line">    ProcessControlBlock* tail;</span><br><span class="line">    ProcessControlBlock* Ftail;</span><br><span class="line">    <span class="keyword">int</span> Algo;</span><br><span class="line">    <span class="keyword">int</span> ListLength;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAlgo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Algo;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setListLength</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        ListLength = len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getListLengthn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ListLength;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">TransList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(ProcessControlBlock* cur = head;cur!=<span class="literal">NULL</span>;cur=cur-&gt;getPtr())&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"ID = "</span>&lt;&lt;cur-&gt;getProcessIndex()&lt;&lt;<span class="string">" Pri = "</span>&lt;&lt;cur-&gt;getPriorityNum()&lt;&lt;<span class="string">" CUR = "</span>&lt;&lt;cur-&gt;getCurrentTime();</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" ALLTIME = "</span>&lt;&lt;cur-&gt;getAllTime();</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" Next = "</span>;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;getPtr()!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;cur-&gt;getPtr()-&gt;getProcessIndex();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" STATE = "</span>;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;getState() == State_Running)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"R"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;getState() == State_Waiting)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"W"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;getState() == State_Finish)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"F"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" ptr = "</span>&lt;&lt;cur-&gt;getPtr();</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"head = "</span>&lt;&lt;head-&gt;getProcessIndex()&lt;&lt;<span class="string">" tail = "</span>&lt;&lt;tail-&gt;getProcessIndex()&lt;&lt;<span class="string">" Ftail = "</span>&lt;&lt;(Ftail==<span class="literal">NULL</span>?<span class="number">0</span>:(Ftail-&gt;getProcessIndex()))&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ProcessList(<span class="keyword">int</span> algo)&#123;</span><br><span class="line">        head = <span class="literal">NULL</span>;</span><br><span class="line">        tail = <span class="literal">NULL</span>;</span><br><span class="line">        Algo = algo;</span><br><span class="line">        Ftail = <span class="literal">NULL</span>;</span><br><span class="line">        ListLength = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IsRunning</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(head-&gt;getState() == State_Waiting)&#123;</span><br><span class="line">            head-&gt;setState(State_Running);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addProcess</span><span class="params">(ProcessControlBlock* curProcessPtr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * When List is Empty</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span> &amp;&amp; tail == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            head = curProcessPtr;</span><br><span class="line">            tail = curProcessPtr;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * When Algo is RoundRobin</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         <span class="keyword">if</span>(Algo == Algo_RoundRobin)&#123;</span><br><span class="line">             tail-&gt;setPtr(curProcessPtr);</span><br><span class="line">             tail = curProcessPtr;</span><br><span class="line">             curProcessPtr-&gt;setPtr(<span class="literal">NULL</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">          * When Algo is Priority</span></span><br><span class="line"><span class="comment">          * Insert with Priority</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( Algo == Algo_Priority)&#123;</span><br><span class="line">             <span class="keyword">bool</span> isFind = <span class="literal">false</span>;</span><br><span class="line">             ProcessControlBlock* cur = <span class="literal">NULL</span>;</span><br><span class="line">             ProcessControlBlock* pre = <span class="literal">NULL</span>;</span><br><span class="line">             <span class="keyword">for</span>(cur = head ;cur!=<span class="literal">NULL</span> ; cur = cur-&gt;getPtr())&#123;</span><br><span class="line">                 <span class="keyword">if</span>(curProcessPtr-&gt;getPriorityNum() &gt; cur-&gt;getPriorityNum())&#123;</span><br><span class="line">                     <span class="comment">/*</span></span><br><span class="line"><span class="comment">                      *  If refProcess's Priority above the curProcess'Priority</span></span><br><span class="line"><span class="comment">                      *  When curProcess is the first Process</span></span><br><span class="line"><span class="comment">                      */</span></span><br><span class="line">                     isFind = <span class="literal">true</span>;</span><br><span class="line">                     <span class="keyword">if</span>(cur == head)&#123;</span><br><span class="line">                         curProcessPtr-&gt;setPtr(cur);</span><br><span class="line">                         head = curProcessPtr;</span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="keyword">else</span>&#123;</span><br><span class="line">                         pre-&gt;setPtr(curProcessPtr);</span><br><span class="line">                         curProcessPtr-&gt;setPtr(cur);</span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                 pre = cur;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">/*</span></span><br><span class="line"><span class="comment">              * refProcess'PriorityNum is the Minest</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">             <span class="keyword">if</span>(isFind == <span class="literal">false</span>)&#123;</span><br><span class="line">                 tail-&gt;setPtr(curProcessPtr);</span><br><span class="line">                 curProcessPtr-&gt;setPtr(<span class="literal">NULL</span>);</span><br><span class="line">                 tail = curProcessPtr;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DeleteProcess</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * We always Delete Process From Head of the List</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(Algo == Algo_RoundRobin)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * ProcessDone</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            ProcessControlBlock* DeleteProcessPtr = head;</span><br><span class="line">            <span class="keyword">if</span>(head-&gt;getCurrentTime() &gt;=head-&gt;getAllTime())&#123;</span><br><span class="line"></span><br><span class="line">                head = head-&gt;getPtr();</span><br><span class="line">                DeleteProcessPtr-&gt;setPtr(<span class="literal">NULL</span>);</span><br><span class="line">                DeleteProcessPtr-&gt;setState(State_Finish);</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * When it is the first ProcessDone</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(Ftail == <span class="literal">NULL</span>)&#123;</span><br><span class="line">                    tail-&gt;setPtr(DeleteProcessPtr);</span><br><span class="line">                    Ftail = DeleteProcessPtr;</span><br><span class="line">                    DeleteProcessPtr-&gt;setPtr(<span class="literal">NULL</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    Ftail-&gt;setPtr(DeleteProcessPtr);</span><br><span class="line">                    Ftail = DeleteProcessPtr;</span><br><span class="line">                    DeleteProcessPtr-&gt;setPtr(<span class="literal">NULL</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                head = head-&gt;getPtr();</span><br><span class="line">                DeleteProcessPtr-&gt;setPtr(tail-&gt;getPtr());</span><br><span class="line">                DeleteProcessPtr-&gt;setState(State_Waiting);</span><br><span class="line">                tail-&gt;setPtr(DeleteProcessPtr);</span><br><span class="line">                tail = DeleteProcessPtr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Algo == Algo_Priority)&#123;</span><br><span class="line">            ProcessControlBlock* DeleteProcessPtr = head;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Hook</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span>(head-&gt;getCurrentTime() &gt;=head-&gt;getAllTime())&#123;</span><br><span class="line"></span><br><span class="line">                head = head-&gt;getPtr();</span><br><span class="line">                DeleteProcessPtr-&gt;setPtr(<span class="literal">NULL</span>);</span><br><span class="line">                DeleteProcessPtr-&gt;setState(State_Finish);</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * When it is the first ProcessDone</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(Ftail == <span class="literal">NULL</span>)&#123;</span><br><span class="line">                    tail-&gt;setPtr(DeleteProcessPtr);</span><br><span class="line">                    Ftail = DeleteProcessPtr;</span><br><span class="line">                    DeleteProcessPtr-&gt;setPtr(<span class="literal">NULL</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    Ftail-&gt;setPtr(DeleteProcessPtr);</span><br><span class="line">                    Ftail = DeleteProcessPtr;</span><br><span class="line">                    DeleteProcessPtr-&gt;setPtr(<span class="literal">NULL</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                head = head-&gt;getPtr();</span><br><span class="line">                DeleteProcessPtr-&gt;setPtr(<span class="literal">NULL</span>);</span><br><span class="line">                DeleteProcessPtr-&gt;setState(State_Waiting);</span><br><span class="line">                ProcessControlBlock* pre = <span class="literal">NULL</span>;</span><br><span class="line">                <span class="keyword">bool</span> IsFind = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(ProcessControlBlock* cur = head ;cur!=<span class="literal">NULL</span>&amp;&amp;cur-&gt;getState()==State_Waiting;cur = cur-&gt;getPtr())&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(DeleteProcessPtr-&gt;getPriorityNum() &gt; cur-&gt;getPriorityNum())&#123;</span><br><span class="line">                        IsFind = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">if</span>(cur == head)&#123;</span><br><span class="line">                            head = DeleteProcessPtr;</span><br><span class="line">                            DeleteProcessPtr-&gt;setPtr(cur);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            pre-&gt;setPtr(DeleteProcessPtr);</span><br><span class="line">                            DeleteProcessPtr-&gt;setPtr(cur);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    pre = cur;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(IsFind == <span class="literal">false</span>)&#123;</span><br><span class="line">                    DeleteProcessPtr-&gt;setPtr(tail-&gt;getPtr());</span><br><span class="line">                    tail-&gt;setPtr(DeleteProcessPtr);</span><br><span class="line">                    tail = DeleteProcessPtr;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RunOnce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Algo == Algo_RoundRobin)&#123;</span><br><span class="line">            head-&gt;setCurrentTime( head-&gt;getCurrentTime()+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            DeleteProcess();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Algo == Algo_Priority)&#123;</span><br><span class="line">            head-&gt;setCurrentTime(head-&gt;getCurrentTime()+<span class="number">1</span>);</span><br><span class="line">            head-&gt;setPriorityNum(head-&gt;getPriorityNum()<span class="number">-3</span>);</span><br><span class="line">            DeleteProcess();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        X Node[ListLength];</span><br><span class="line">        <span class="keyword">int</span> Index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ProcessControlBlock* cur = head ;cur!=<span class="literal">NULL</span> ; cur=  cur-&gt;getPtr())&#123;</span><br><span class="line"></span><br><span class="line">            Node[Index].ID = cur-&gt;getProcessIndex();</span><br><span class="line">            Node[Index].PRIORITY = cur-&gt;getPriorityNum();</span><br><span class="line">            Node[Index].CURTIME = cur-&gt;getCurrentTime();</span><br><span class="line">            Node[Index].ALLTIME = cur-&gt;getAllTime();</span><br><span class="line">            Node[Index].STATE = cur-&gt;getState();</span><br><span class="line">            Node[Index].NEXT = (cur-&gt;getPtr()==<span class="literal">NULL</span>?<span class="number">0</span>:cur-&gt;getPtr()-&gt;getProcessIndex());</span><br><span class="line">            Index++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"============================================"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"RUNNING PROC        WAITING QUEUE"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(Node[<span class="number">0</span>].STATE == State_Waiting) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, Node[<span class="number">0</span>].ID);</span><br><span class="line">            t++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"                  "</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =t;i&lt;ListLength;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Node[i].STATE == State_Finish)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"  %d"</span>,Node[i].ID);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"============================================"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        sort(Node,Node+ListLength,cmp);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"ID                "</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;ListLength;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%3d"</span>,Node[i].ID);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"Priority          "</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;ListLength;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%3d"</span>,Node[i].PRIORITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"CURTIME            "</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>  i =<span class="number">0</span>;i&lt;ListLength;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%3d"</span>,Node[i].CURTIME);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"ALLTIME            "</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>  i =<span class="number">0</span>;i&lt;ListLength;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%3d"</span>,Node[i].ALLTIME);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"STATE             "</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;ListLength;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Node[i].STATE == State_Waiting)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"  W"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(Node[i].STATE == State_Finish)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"  F"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(Node[i].STATE == State_Running)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"  R"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"NEXT             "</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;ListLength;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%3d"</span>,Node[i].NEXT);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//OSEX1_PROCESSLIST_H</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><pre><code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Yisa on 2016/11/29.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> OSEX1_PROCESSDISPATCH_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OSEX1_PROCESSDISPATCH_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ProcessList.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProcessDispatch</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> ListLength;</span><br><span class="line">    ProcessList* processList = <span class="literal">NULL</span> ;</span><br><span class="line">    <span class="keyword">int</span> Algo;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ProcessDispatch(<span class="keyword">int</span> length,<span class="keyword">int</span> algo)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ListLength = length;</span><br><span class="line">        <span class="keyword">this</span>-&gt;Algo = algo;</span><br><span class="line">        processList = <span class="keyword">new</span> ProcessList(algo);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;ListLength;i++)&#123;</span><br><span class="line">            ProcessControlBlock* process = <span class="keyword">new</span> ProcessControlBlock();</span><br><span class="line">            processList-&gt;setListLength(processList-&gt;getListLengthn()+<span class="number">1</span>);</span><br><span class="line">            processList-&gt;addProcess(process);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Running</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(processList-&gt;IsRunning())&#123;</span><br><span class="line">            processList-&gt;PrintList();</span><br><span class="line">            processList-&gt;RunOnce();</span><br><span class="line">        &#125;</span><br><span class="line">        processList-&gt;PrintList();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"============================================"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//OSEX1_PROCESSDISPATCH_H</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="主程序入口"><a href="#主程序入口" class="headerlink" title="主程序入口"></a>主程序入口</h2><pre><code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ProcessDispatch.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line"><span class="built_in">string</span> <span class="keyword">static</span> string_Algo_RoundRobin = <span class="string">"roundrobin"</span>;</span><br><span class="line"><span class="built_in">string</span> <span class="keyword">static</span> string_Algo_Priority = <span class="string">"priority"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    m[string_Algo_Priority] = Algo_Priority;</span><br><span class="line">    m[string_Algo_RoundRobin] = Algo_RoundRobin;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"TYPE THE ALGORITHM:  "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]&gt;=<span class="string">'A'</span>&amp;&amp;str[i]&lt;=<span class="string">'Z'</span>)&#123;</span><br><span class="line">            str[i] = str[i]-<span class="string">'A'</span>+<span class="string">'a'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ProcessDispatch* processDispatch = <span class="literal">NULL</span>;</span><br><span class="line">    processDispatch = <span class="keyword">new</span> ProcessDispatch(<span class="number">5</span>,m[str]);</span><br><span class="line">    processDispatch-&gt;Running();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概论&quot;&gt;&lt;a href=&quot;#概论&quot; class=&quot;headerlink&quot; title=&quot;概论&quot;&gt;&lt;/a&gt;概论&lt;/h2&gt;&lt;p&gt;今天操作系统实验一的实验是对进程调度的模拟，本身没什么太大的边数。 久违的用了C++通过面向对象的方式实现了时间片轮转和优先级最高的模拟。&lt;/p&gt;
&lt;p&gt;很久没有用C++写过面向对象的内容了，并且还涉及到了链表和指针的操作。&lt;/p&gt;
&lt;p&gt;感觉自己的写法非常Java化，在涉及到指针的操作上，debug用了很久。诶&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="http://Yisaer.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>进程互斥的软件解法</title>
    <link href="http://Yisaer.github.io/2016/10/21/OS1/"/>
    <id>http://Yisaer.github.io/2016/10/21/OS1/</id>
    <published>2016-10-21T03:04:22.000Z</published>
    <updated>2017-12-28T16:21:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p1.bqimg.com/567571/51b89007dd7a6f2d.png" alt="pic1"></p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>在写这篇文章前，我曾花了一段时间仔细读了学校的教材，在经历了无数次迷茫与痛苦后，我终于确定了这并非是我的理解问题或者是智商问题。确实是学校的教材真的有毒</strong></p><blockquote><p>就像伟大的爬墙爱好者源氏所言:” 我曾在这里荒废了许多时间.”</p></blockquote><p><strong>所以这即是一个总结，也是一个体会，更是一个对自己的警醒。 同学，你受教材的毒害太深了！</strong></p><h2 id="关于互斥"><a href="#关于互斥" class="headerlink" title="关于互斥"></a>关于互斥</h2><p>事实上在很多经典的书以及网课上，关于进程互斥的解决方法大多重点阐述了硬件与信号量的机制。而在软件算法实现上却鲜有提之，当然我校的教材更是提都没提。 </p><p>在观看了北大的网课以及读了OS：IDP一书以后，有幸领略了通过软件算法来控制进程互斥。而我也将以从最初的形态到完善的算法慢慢推导。事实上算法解法更重要的是一种思想，这里我以OS:IDP一书代码为例。</p><a id="more"></a><h2 id="互斥的三大要求"><a href="#互斥的三大要求" class="headerlink" title="互斥的三大要求"></a>互斥的三大要求</h2><p>我们都知道，互斥有着最基本的三大要求。如果不满足这三个要求，则不能满足互斥。</p><ol><li>临界区内不能有多个进程</li><li>临界区外的进程不能干涉其他进程</li><li>临界区的进程不能出现被无限延迟的情况。</li></ol><h2 id="最简单的实现"><a href="#最简单的实现" class="headerlink" title="最简单的实现"></a>最简单的实现</h2><h3 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h3><p>我们以全局变量turn来决定谁来进入临界区，</p><pre><code>当 turn = x 时 ，即进程号为x的进程进入临界区while(turn !=x){    do nothing}critical sectionturn = other</code></pre><p>这个算法简单有效的保证了共享属性。 但是他却有两个致命的缺陷。考虑到进程的并发性，这种算法的执行效率将以较慢的进程所决定。假设进程1以1小时10次的速率进入进程，进程2以一小时1000次的速率进入进程。那么进程2就必须适应进程1的步调。<br>    另一方面，假设某一进程被终止了，则会造成其他进程的永久阻塞。</p><h3 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h3><p>算法一虽然解决了决定进入进程的进程号，但是实际上为了保证一个进程失败，其他进程也能进入进程，我们还需要进程的状态。</p><pre><code>所以我们通过布尔数字变量来联系进程的状态，当进入临界区时flag[x] = true，反之为falsewhile(flag[other]){    do nothing}flag[x] = truecritical section flag[x] = false</code></pre><p>这个算法虽然解决了进程失败会影响到其他进程的问题，但是如果以并发的角度考虑，这个算法并没有保证互斥的要求。 假设有两个进程并发的执行</p><pre><code>p0执行while语句发现flag[1]为falsep1执行while语句发现flag[0]为falsep0设置flag[0]为true，并进入临界区p1设置flag[1]为true，并进入临界区</code></pre><p>显然，以这样的顺序执行，程序出错。</p><h3 id="算法三"><a href="#算法三" class="headerlink" title="算法三"></a>算法三</h3><p>算法二失败的原因在于，在一个进程可以在另一个进程检查完他的状态后，再改变自己的状态。只要修正了个这个错误即可，所以简单的我们只需将自身状态的改变移动到检查他人状态之前即可</p><pre><code>flag[x] =truewhile(flag[other]){    do nothing}critical section flag[x] = false</code></pre><p>但是在这样修改了以后同样出现了新的问题，同样以并发的角度考虑两个进程。</p><p>当进程P1与进程P0都想要进入临界区时，同时将在自己flag置于true时，然后在检查其他人状态时发现其他人都想进入。</p><p>这就会造成P0进程等待P1进程释放flag，P1进程等待P0进程释放flag,造成死锁。</p><h3 id="算法四"><a href="#算法四" class="headerlink" title="算法四"></a>算法四</h3><p>为了解决算法三的死锁问题，我们引入了一种使得进程在发现其他进程也同样想进入临界区时，可以回退自己状态的<strong>“谦让机制”</strong> ,即当发现其他进程要进入临界区时，将自己的flag区设置为false,过段时间将自己回设置到true</p><pre><code>flag[x] = truewhile(flag[other]){    flag[x] = false    delay    flag[x] = true}critical section flag[x] = false</code></pre><p>这个问题虽然解决了算法三的死锁问题，但是如果我们考虑到以这样的顺序并发执行:</p><pre><code>P0设置flag[0]为trueP1设置flag[1]为trueP0检查P1P1检查P0P0设置flag[0]为falseP1设置flag[1]为falseP0设置flag[0]为trueP1设置flag[1]为true</code></pre><p>显然，程序会以这样的顺序无限循环下去。但是严格的讲，由于循环可能会被程序交替执行的速度所打破，所以可以称作是一个活锁。</p><h4 id="Dekker算法"><a href="#Dekker算法" class="headerlink" title="Dekker算法"></a>Dekker算法</h4><p>算法四的进程满足了互斥，解决了死锁问题，留有一个互相谦让的活锁。 当两个进程的互相前让对方进入临界区时，我们可以借鉴算法一的思想，通过一个全局变量turn来指定一个进程进入临界区，这样既可满足所以要求。也就是Dekker算法的核心思想。</p><pre><code>boolean flag[] int turn;void PX(){    while( true){        flag[X] = true        while(flag[other]){            if(turn == other){                flag[X] = false;                while(turn == 1) do nothing                flag[X] = true;            }        }        critical section        turn = other;        flag[X] = false;    }}</code></pre><h2 id="Peterson算法"><a href="#Peterson算法" class="headerlink" title="Peterson算法"></a>Peterson算法</h2><p>在Dekker算法的思想下，Peterson算法用了一种更为简答出色的方式。</p><pre><code>void PX(){    while(true){        flag[x] = true;        turn  = other;        while(flag[other] &amp;&amp; turn == other) do nothing        critical section        flag[0] = false    }}</code></pre><p>从并发的角度考虑Peterson算法，当多个进程都需要进入临界区时，全局变量会被最后一个运行的进程所覆盖掉值，从而制定了某个进程进入临界区，而其他进程在临界区外等待。 同样其他进程执行完以后，将flag[other]置为false。那么当前进程也不会进入while循环，而是进入临界区，则不会造成阻塞的现象。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从算法的角度考虑互斥保护，要时时刻刻以并发的角度，从不同执行顺序上来思考程序会不会死锁，活锁等问题。</p><p>另外一点是，从所有的程序中可以看出，软件解法存在一个问题在于：当一个进程进入临界区时，其他进程必须不停的去检查自己是否能进入临界区，这同样造成了CPU开销。 从这方面可以看出，为何我们后面还会再去引入硬件机制与信号量的概念。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p1.bqimg.com/567571/51b89007dd7a6f2d.png&quot; alt=&quot;pic1&quot;&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;在写这篇文章前，我曾花了一段时间仔细读了学校的教材，在经历了无数次迷茫与痛苦后，我终于确定了这并非是我的理解问题或者是智商问题。确实是学校的教材真的有毒&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就像伟大的爬墙爱好者源氏所言:” 我曾在这里荒废了许多时间.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;所以这即是一个总结，也是一个体会，更是一个对自己的警醒。 同学，你受教材的毒害太深了！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于互斥&quot;&gt;&lt;a href=&quot;#关于互斥&quot; class=&quot;headerlink&quot; title=&quot;关于互斥&quot;&gt;&lt;/a&gt;关于互斥&lt;/h2&gt;&lt;p&gt;事实上在很多经典的书以及网课上，关于进程互斥的解决方法大多重点阐述了硬件与信号量的机制。而在软件算法实现上却鲜有提之，当然我校的教材更是提都没提。 &lt;/p&gt;
&lt;p&gt;在观看了北大的网课以及读了OS：IDP一书以后，有幸领略了通过软件算法来控制进程互斥。而我也将以从最初的形态到完善的算法慢慢推导。事实上算法解法更重要的是一种思想，这里我以OS:IDP一书代码为例。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="http://Yisaer.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>使用valiedate插件让你的表单验证更为轻松</title>
    <link href="http://Yisaer.github.io/2016/08/27/valiedate/"/>
    <id>http://Yisaer.github.io/2016/08/27/valiedate/</id>
    <published>2016-08-27T13:15:37.000Z</published>
    <updated>2017-12-28T16:23:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在表单验证中，jQuery的一款叫validate的插件十分好用，简单的API封装了大部分常用操作。</p><a id="more"></a><h2 id="实战Demo"><a href="#实战Demo" class="headerlink" title="实战Demo"></a>实战Demo</h2><p>对于一个用户登录的简单Demo,我们引入jqeury库和valiedate插件</p><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Validate插件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"demoForm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"confirm-password"</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"confirm-password"</span> <span class="attr">name</span>=<span class="string">"confirm-password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.0.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.15.0/jquery.validate.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="Jquery部分"><a href="#Jquery部分" class="headerlink" title="Jquery部分:"></a>Jquery部分:</h3><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> validator1;</span><br><span class="line">validator1=$(<span class="string">"#demoForm"</span>).validate(&#123;</span><br><span class="line">debug: <span class="literal">true</span>,</span><br><span class="line">rules: &#123;</span><br><span class="line">username: &#123;</span><br><span class="line">                    required: <span class="literal">true</span>,</span><br><span class="line">                    minlength: <span class="number">2</span>,</span><br><span class="line">                    maxlength: <span class="number">10</span></span><br><span class="line">                &#125;,</span><br><span class="line">                password: &#123;</span><br><span class="line">                    required: <span class="literal">true</span>,</span><br><span class="line">                    minlength: <span class="number">2</span>,</span><br><span class="line">                    maxlength: <span class="number">16</span></span><br><span class="line">                &#125;,</span><br><span class="line">                 <span class="string">"confirm-password"</span>: &#123;</span><br><span class="line">                    equalTo: <span class="string">"#password"</span></span><br><span class="line">                &#125;</span><br><span class="line">&#125;,</span><br><span class="line">messages: &#123;</span><br><span class="line">                username: &#123;</span><br><span class="line">                    required: <span class="string">'请输入用户名'</span>,</span><br><span class="line">                    minlength: <span class="string">'用户名不能小于2个字符'</span>,</span><br><span class="line">                    maxlength: <span class="string">'用户名不能超过10个字符'</span>,</span><br><span class="line">                    remote: <span class="string">'用户名不存在'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                password: &#123;</span><br><span class="line">                    required: <span class="string">'请输入密码'</span>,</span><br><span class="line">                    minlength: <span class="string">'密码不能小于2个字符'</span>,</span><br><span class="line">                    maxlength: <span class="string">'密码不能超过16个字符'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></code></pre><h2 id="异步验证"><a href="#异步验证" class="headerlink" title="异步验证"></a>异步验证</h2><p>valiedate还有许多好用的属性，如果需要异步验证，可以使用valiedate封装的remote，同样也是基于ajax,如：</p><pre><code>username: {    required: true,    remote: &quot;remote.json&quot;}</code></pre><p>这样对于username这个表单元素，就会进行异步验证，当然远程的url你可以填写jsp,php等</p><p>还有其他的验证属性如:</p><table><thead><tr><th>验证属性</th><th>接受值</th><th style="text-align:right">作用</th></tr></thead><tbody><tr><td>email</td><td>true</td><td style="text-align:right">验证是否为邮箱格式</td></tr><tr><td>url</td><td>true</td><td style="text-align:right">验证是否为url格式</td></tr><tr><td>date</td><td>true</td><td style="text-align:right">验证是否为date格式</td></tr><tr><td>dateISO</td><td>true</td><td style="text-align:right">验证是否为dateISO格式</td></tr></tbody></table><h2 id="批量验证"><a href="#批量验证" class="headerlink" title="批量验证"></a>批量验证</h2><p>对于表单中有着大量元素，但元素验证的属性重复的情况，valiedate有一个专门用于批量验证的静态方法</p><pre><code>$.validator.addClassRules({    txt: {        required: true,        minlength: 5    }})</code></pre><p>那么这个方法将会对class为txt的表单元素进行验证。也就是说到时我们的表单编写只需增加class属性以后即可，而不用每个表单都添加验证。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在表单验证中，jQuery的一款叫validate的插件十分好用，简单的API封装了大部分常用操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="http://Yisaer.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
</feed>
